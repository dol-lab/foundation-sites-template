@use "sass:color";
@use "sass:map";

//  Spaces Custom Settings for Foundation
//  -----------------------------
//
//  Table of Contents:
//   0. Root
//   1. General
//   2. Grid
//   3. Typography
//   4. Card
//   5. Spaces Card
//   6. User Card
//   7. Post Card
//   8. Clipping
//   9. Dropdown
//   10. Switch & Checkbox
//   11. Button & Input
//   12. Dot Menu
//   13. Excerpt
//   14. Menu
//   15. Icons
//   16. Tabs
//   19. Utilities
//   20. Orbit
//   21. Spinner
//   22. Typeahead
//   23. Accordion
//   24. Paginate
//   25. Callout
//   26. Chips / Choices
//   27. Breadcrumbs
//   28. Swiper
//   29. Keyboard focus
//   30. Shadows
//   31. Containers
//   32. Details
//   33. Theming
//   99. Theming

// 0. Root
// ---------

:root {
  interpolate-size: allow-keywords;

  --f-radius: #{$global-radius};
  --f-radius-small: #{$global-radius-small};
  --f-gutter-small: #{$global-gutter-small};
  --f-gutter-large: #{$global-gutter-large};
  --f-transition-short: #{$global-transition-short};
  --f-transition-medium: #{$global-transition-medium};
  --f-transition-long: #{$global-transition-long};
  --f-transition-timing: #{$global-transition-timing};
  --f-transition-timing-cubic-bezier: #{$global-transition-timing-cubic-bezier};
  --f-drop-shadow: #{$global-drop-shadow};
  --f-drop-shadow-large: #{$global-drop-shadow-large};
  --f-margin: #{$global-margin};
  --f-padding: #{$global-padding};
  --f-menu-padding: #{$global-menu-padding};
  --f-menu-nested-margin: #{$global-menu-nested-margin};

  @each $size, $value in $user-card-sizes {
    --user-card--#{$size}: #{$value};
  }
}

// 0. General
// ---------

html {
  overflow-y: scroll;
}

body {
  background-color: $color-bg-0;
  color: $color-text-0;
  margin: 0;
  padding: 0;
  min-height: 100dvh;
  font-family: $body-font-family;
  font-weight: $global-weight-normal;
  line-height: $global-lineheight;
  text-rendering: optimizelegibility;

  @if $body-antialiased {
    -webkit-font-smoothing: antialiased; // sass-lint:disable-line no-vendor-prefixes
    -moz-osx-font-smoothing: grayscale; // sass-lint:disable-line no-vendor-prefixes
  }
}

// Somewhat CSS reset-ish settings

img {
  // Get rid of gap under images by making them display: inline-block; by default
  display: inline-block;
  vertical-align: middle;

  // Grid defaults to get images and embeds to work properly
  max-width: 100%;
  height: auto;
}

// Make sure textarea takes on height automatically
textarea {
  height: auto;
  min-height: 50px;
  border-radius: $global-radius;
}

// Make select elements are 100% width by default
select {
  box-sizing: border-box;
  width: 100%;
  border-radius: $global-radius;
}

// Styles Google Maps and MapQuest embeds properly
// sass-lint:disable-line no-ids
.map_canvas,
.mqa-display {
  img,
  embed,
  object {
    max-width: none !important;
  }
}

// Reset <button> styles created by most browsers
button {
  @include disable-mouse-outline;

  padding: 0;
  appearance: none;
  border: 0;
  border-radius: $global-radius;
  background: transparent;
  line-height: 1;
  cursor: $global-button-cursor;
}

// Prevent text overflow on pre
pre {
  overflow: auto;
}

// Make reset inherit font-family instead of settings sans-serif
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
}

// Internal classes to show/hide elements in JavaScript
.is-visible {
  display: block !important;
}

.is-hidden {
  display: none !important;
}

// 2. Grid
// ---------

.grid-container {
  &.space {
    @each $breakpoint, $width in $breakpoints {
      @include breakpoint(#{$breakpoint} only) {
        margin-top: map-get($grid-container-padding, #{$breakpoint});
      }
    }
  }

  &.no-padding {
    padding: 0;
  }
}

.auto-grid {
  display: grid;
  grid-template-columns: repeat(
    auto-fill,
    minmax(min(var(--grid-column-min-width, 250px), 100%), 1fr)
  );
}

.reverse-grid-container {
  margin-inline: calc(-50vw + 50%);
}

.cell {
  position: relative;
}

.sidebar {
  z-index: 30;
}

// 3. Typography
// ---------

p {
  font-size: $paragraph-font-size;
	color: $color-text-1;

  &.small {
    font-size: $small-font-size;
  }

  &:last-child {
    margin-bottom: 0;
  }

  // @include foundation-palette();
}

.stat {
  font-weight: $global-weight-bold;
  line-height: 1.2;
  text-transform: uppercase;

  @include breakpoint(medium down) {
    font-size: 2rem;
  }
}

.lead {
  font-size: 1.25em;
}

.highlight-word {
  &::before {
    content: "»";
  }

  &::after {
    content: "«";
  }

  margin-right: 1ch;
}

span {
  &.small {
    font-size: $small-font-size;
  }
}

.fa {
  @include foundation-palette($hover: false);
}

a {
  &:focus {
    outline: none;
  }

  @include foundation-palette;
  @include foundation-palette($selector: "li", $child: ">&");
  @include button-sizes;
}

body .s-fg-a-c1-parent a {
  &:not([class^="wp-block"], .primary, .secondary, .alert, .success, .warning, .accordion-title, .button, [role="tab"], [role="menuitem"]) {
    @extend .brand;
  }
}

.line-clamp {
  -webkit-line-clamp: 2;
  line-clamp: 2;
  -webkit-box-orient: vertical;
  hyphens: auto;
  overflow: hidden;
  display: -webkit-box;
  display: flex;
}

.hover-underline:hover {
  text-decoration: underline;
}

ul {
  font-size: $paragraph-font-size;

  // @include foundation-palette();
}

small {
  color: $color-text-2;
  display: inline-block;
  line-height: $header-lineheight;

  & > a {
    &:hover {
      color: $color-text-0;
    }
  }
}

code {
  border-radius: $global-radius-small;
  font-size: 0.85em;
  position: relative;
  top: -0.08em;
  padding: 0.15em 0.4em;
}

pre {
  tab-size: 2ch;
}

input,
textarea,
select {
  font-size: $paragraph-font-size;
  flex: 1;
}

small > label,
label.small {
  font-size: $small-font-size;
}

label[for] {
  cursor: pointer;
}

.hover-underline {
  &:hover {
    text-decoration: underline;
  }
}

// 4. Card
// ---------

.card {
  min-width: auto;
  flex-grow: 0;
  font-size: $paragraph-font-size;

  /* box-shadow:
        0 0 0 nth($hr-border, 1) nth($hr-border, 3),
        0 0 nth($hr-border, 1) 0 nth($hr-border, 3),
        0 nth($hr-border, 1) 0 0 nth($hr-border, 3),
        nth($hr-border, 1) 0 0 0 nth($hr-border, 3); */
  border: $hr-border;
  transition: box-shadow $global-transition-medium $global-transition-timing;
  background-color: $color-bg-1;
  overflow: clip;
  color: $color-text-0;

  .card-anchor {
    color: inherit;
    text-decoration: none !important;
    display: flex;
    flex-direction: column;
    padding: 0 !important;

    @include foundation-palette;
  }

  &.overflow-auto {
    overflow: auto;
  }

  &.overflow-hidden {
    overflow: hidden;
  }

  &.overflow-initial {
    overflow: initial;
  }

  &.muted {
    opacity: 0.5;
  }

  &:not(.static) {
    &:hover {
      cursor: pointer;
      box-shadow: $global-drop-shadow;
      transition: box-shadow $global-transition-short $global-transition-timing;
    }
  }

  input,
  textarea,
  select {
    font-size: $paragraph-font-size;
  }

  &.accordion {
    background: $card-background;
  }
}

.card-header {
  position: relative;
  width: 100%;
  min-width: 0; // necessary to override flex-box default (e.g. members hover in default space).
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  flex: 1;
  padding: $button-padding;

  // padding-bottom: 0.25rem;
  line-height: $paragraph-lineheight;

  h1 {
    margin-bottom: 0;
    word-break: break-word;
  }

  &:not(.align-justify) {
    justify-content: flex-start;
  }

  &:is(.flex-dir-row) {
    flex-direction: row;
    align-items: center;
  }

  &.no-padding {
    padding: 0;
    padding-left: nth($button-padding, 2);
  }
}

.post-card-anchor {
  width: 100%;
}

.card-title {
  display: flex;
  align-items: center;
  font-size: 1rem;

  // padding-bottom: 0.3rem;
  line-height: $header-lineheight;
  font-weight: $global-weight-normal;
  margin: 0;

  &.small {
    font-size: 0.875rem;
  }

  .fa {
    font-size: 0.75em;
    margin-right: 0.5em;
  }
}

.card-section,
.card-divider {
  padding: map-get($padding-sizes, medium);

  &-negative {
    margin-inline: -#{nth(map-get($padding-sizes, medium), 2)};
  }

  display: flex;
  flex-direction: column;

  &.flex-dir-row {
    flex-direction: row;
  }

  &.flex-dir-row-reverse {
    flex-direction: row-reverse;
  }

  &.flex-dir-column {
    flex-direction: column;
  }

  &.small {
    line-height: 1.25rem;
  }

  & > a {
    /* width: 100%; */
    text-decoration: none;
    box-sizing: content-box;

    /* span {
			line-height: 1;
		} */

    &::only-child:hover {
      background: $color-bg-2;
    }
  }

  &.no-padding {
    & > [type="text"],
    & > [type="password"],
    & > [type="date"],
    & > [type="datetime"],
    & > [type="datetime-local"],
    & > [type="month"],
    & > [type="week"],
    & > [type="email"],
    & > [type="number"],
    & > [type="search"],
    & > [type="tel"],
    & > [type="time"],
    & > [type="url"],
    & > [type="color"],
    & > textarea,
    & > select,
    & > .input {
      border: none;
      resize: none;
    }

    & > a {
      box-sizing: border-box;
    }
  }

  @each $size-label, $size in $user-card-sizes {
    &.#{$size-label} {
      &:last-child {
        height: $size;
      }
    }
  }

  // &:last-child {
  // 	margin-top: auto;
  // }
}

.card-divider {
  border-top: $hr-border;

  &.accordion-content {
    border-top: $hr-border !important;
  }

  &:first-child {
    border: none;
  }
}

.box-shadow {
  box-shadow: $global-drop-shadow;
}

.page-title {
  /* @extend .card-title;
	font-size: 1.25rem; */
  padding-top: 0.5rem;

  // for search results, otherwise the title is underlined and bold, which looks quite different from what pages normally look like
  a {
    text-decoration: none !important;
    font-weight: 400;
  }
}

.page-content {
  padding: 1rem 0;
}

.card-divider,
.card-section {
  &.nested {
    // @todo: make padding and margin dynamic.
    border-top: none;
    margin-top: -1rem;

    .card-section.no-padding.flex-dir-row {
      border-top: $hr-border;
      margin-top: -1.375rem;
      padding-top: 0.75rem;

      .page-title {
        font-size: 1rem;
        font-weight: 400;
      }
    }
  }
}

// 5. Spaces Card
// ---------

.space-title {
  line-height: 1.3;

  @extend .card-title;

  display: flex;
  margin: auto 0;
  padding: 0.35rem 0.5rem;
  z-index: 1;
  color: $color-text-0;
  background: color-mix-opacity(#{$color-bg-0}, 55%, 45%);
  -webkit-box-orient: vertical;
  backdrop-filter: blur(20px) saturate(200%);
  max-width: 80% !important;
  margin-bottom: 5%;
  border-radius: 0 2px 2px 0;
  align-items: center;

  // span {
  //   white-space: nowrap;
  //   overflow: hidden;
  //   text-overflow: ellipsis;
  // }

  .fa {
    font-size: 0.75em;
    margin-right: 0.5em;
    align-self: center;
  }

  .large & {
    @include header-style("h2", "font-size");

    white-space: normal;
    max-height: 3em;

    @include breakpoint(large) {
      max-height: initial;
    }

    & > * {
			line-clamp: 2;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      hyphens: auto;
      overflow: hidden;
      padding: 2px;
      margin: -2px;
    }
  }
}

.wide {
  width: 100%;
  max-width: 100%;
  padding: 0;

  .large {
    border-radius: 0;
    margin: 0;
  }

  @media (width >= 1366px) {
    .space-title {
      left: calc(50vw - ((1080px - 20px) / 2));
      border-radius: $global-radius-small;
    }
  }
}

// 6. User Card
// ---------

.card-user {
  .user-card-header {
    position: relative;
    display: flex;
    align-items: flex-start;
    flex-wrap: wrap;
  }

  .card-header {
    min-height: $user-card-default-size;
  }

  .checkbox-label {
    height: $user-card-default-size;
    width: $user-card-default-size;
  }

  @each $size-label, $size in $user-card-sizes {
    .#{$size-label} &,
    &.#{$size-label} {
      .card-header {
        min-height: $size;
      }

      .checkbox-label {
        height: $size;
        width: $size;
      }
    }
  }

  /* .profile { */
  .accordion-item & {
    display: flex;
    flex-flow: column wrap;
    align-items: flex-start;
    color: inherit;
    position: relative;
    height: initial;

    @include breakpoint(medium only) {
      flex-direction: row;
    }
  }

  .accordion-item.is-active {
    .user-name {
      font-size: 1rem;
    }

    .avatar-container {
      width: 100%;

      @include breakpoint(medium only) {
        width: map-get($user-card-sizes, large);
      }

      transition: $global-transition-medium;
    }

    .card-header {
      transition: $global-transition-medium;

      @include breakpoint(medium only) {
        min-height: map-get($user-card-sizes, large);
        height: map-get($user-card-sizes, large);
        padding-left: 1rem;
      }
    }

    .expand-button {
      border-radius: 50%;
      opacity: 1;
      background-color: $color-bg-0;
      top: 0.5em;
      right: 0.5em;

      &::after {
        content: "\f106";
        color: $color-text-1;
        font-size: 0.75rem;
        opacity: 1;
        transform-origin: 0.35em 0.7em;
      }
    }
  }

  .accordion-item:not(.is-active) & {
    flex-direction: row;
    align-items: center;

    .card-header {
      max-width: calc(100% - #{$user-card-default-size} * 1.5);
    }

    .user-name {
      font-size: 0.875rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      width: 100%;
      display: inline-block;

      & + .user-info {
        display: block;
        font-size: 0.875rem;
      }
    }

    .accordion-content {
      display: none;
    }
  }

  .accordion-content {
    border: none;
  }

  /* 	} */

  .avatar-container {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: $global-transition-medium;

    .clipped {
      z-index: 10;
    }

    .checkbox {
      position: absolute;

      [type="checkbox"] + label {
        display: flex;
        margin-inline: 0;
      }

      & ~ .clipped {
        transition: $global-transition-medium;
      }
    }

    .spinner-container {
      position: absolute;
      display: none;
      align-items: center;
      justify-content: center;
      height: 100%;
      width: 100%;
      z-index: 10;
      background: $reveal-overlay-background;
    }

    .profile .accordion-item & {
      width: $user-card-default-size;
      transition: $global-transition-medium;
    }
  }

  &:hover .avatar-container,
  &.is-selected {
    .checkbox ~ .clipped {
      pointer-events: none;
      transform: scale(0.5);
      opacity: 0;
      transition: $global-transition-short;
    }
  }
}

.profile .accordion-item {
  &.is-active {
    @include breakpoint(medium only) {
      .margin-top-1[data-visible-on="display"] {
        margin-top: 0 !important;
      }
    }
  }

  .user-email {
    margin-top: 0 !important;
  }
}

.avatar-container {
  z-index: 20;
  width: $user-card-default-size;
  min-width: $user-card-default-size;

  @each $user-card-size, $size in $user-card-sizes {
    &.#{$user-card-size} {
      width: $size;
      min-width: $size;
    }
  }

  img[data-toggle],
  img[role="button"] {
    cursor: pointer;
    transition: $global-transition-short;
  }

  img[data-move] {
    cursor: move;
    transition: $global-transition-short;
  }

  &:hover img[data-toggle],
  &:hover img[data-move],
  &:hover img[role="button"],
  img[role="button"].open,
  [aria-expanded="true"] {
    border-radius: $global-radius;
    transform: scale(0.8);
  }

  @each $size-label, $size in $user-card-sizes {
    .#{$size-label} & {
      width: $size;
      min-width: $size;
    }
  }
}

.user-name {
  font-size: 0.875rem;
  margin: 0;
  display: inline-block;

  .fa {
    margin-left: 1em;
    color: $color-text-2;
  }

  .small & {
    height: 1.125rem;

    &:last-child {
      height: initial;
    }
  }

  .large & {
    font-size: 1rem;
  }

  .xlarge & {
    font-size: 1.5rem;
  }

  .xxlarge & {
    font-size: 1.5rem;
  }
}

// .user-name.text-truncate {

/* truncate needs display block, so vertical flex center no longer works. */
// transform: translateY(50%);
// }

.avatar {
  flex: 0 0 auto;
  width: $user-card-default-size;

  // height: $user-card-default-size;
  img {
    border-radius: $global-radius;
  }

  @each $user-card-size, $size in $user-card-sizes {
    &.#{$user-card-size},
    .avatar.#{$user-card-size} & {
      width: $size;
      height: $size;
    }
  }
}

.avatar-array {
  position: relative;
  width: 48px;
  display: flex;
  justify-content: center;
  align-items: center;

  .avatar-item {
    position: relative;
    flex: 1 1 auto;
    min-width: 28px;

    & + .avatar-item {
      margin-left: -25%;
    }

    @for $i from 1 through 5 {
      &:nth-child(#{$i}) {
        z-index: 5 - $i;
      }
    }
  }

  img {
    width: 28px;
    height: 28px;
    box-shadow: 0 0 0 1px $color-bg-2;
    margin: 0 auto;
    border-radius: 50%;
  }
}

// 6. Post Card
// ---------

.page-card,
.post-card {
  @include header-list;
}

.page-card,
.post-card {
  .post-content,
  .page-secion {
    figure,
    img {
      border-radius: $card-border-radius;
      overflow: clip;

      &:has(+ p) {
        margin-bottom: 1em;
      }
    }
  }
}

.post-card,
.activity-card {
  a:first-child .post-feature-image,
  .post-feature-image:first-child,
  .space-header:first-child {
    overflow: hidden;
    border-radius: $card-border-radius $card-border-radius 0 0;
  }

  &.activity-card-new {
    box-shadow: inset 3px 0 0 var(--s-c1, $primary-color);
  }

  & > .card-section:first-child {
    & > .avatar-container:first-child {
      overflow: hidden;
      border-radius: $card-border-radius 0 0 0;
    }

    & > .avatar-container:last-child {
      overflow: hidden;
      border-radius: 0 $card-border-radius 0 0;
    }
  }

  .card-divider:last-child .comment-avatar-list,
  .card-divider:last-child * .comment-avatar-list {
    --avatar-overlap: 0.6rem;

    flex-flow: row-reverse wrap;

    /* row-reverse is intended. we want to show most recent activity with higher prio.
		 * so we send them in reverted directory, hide overflow and then revers. smart!
		 */

    /* alignment needs to be flex-start. test with many avatars... */
    justify-content: flex-end;
    height: map-get($user-card-sizes, small);
    min-width: map-get($user-card-sizes, small);
    max-width: 40%;
    overflow: hidden;
    border-radius: 0 0 0 $card-border-radius;
    padding-left: calc(
      var(--avatar-overlap) + #{nth(map-get($padding-sizes, small), 1)}
    );
    margin-right: calc(-0.7 * var(--avatar-overlap));

    .avatar-container {
      border-radius: 50%;
      overflow: hidden;
      border: 3px solid $color-bg-1;
      box-sizing: border-box;
      margin-left: calc(-1 * var(--avatar-overlap));
    }
  }

  .user:not(:first-child) {
    border-top: $hr-border;
  }

  .dropdown-pane {
    width: 150px;
  }

  .activity-blog {
    text-decoration-color: color-mix-opacity(
      #{$color-text-0},
      70%,
      30%
    ) !important;
  }

  .activity-description {
    line-height: 1.4;
    word-break: break-word;
    overflow-wrap: break-word;
  }
}

.post-card-footer,
.activity-card-footer {
  // height: map-get($user-card-sizes, small);
  box-sizing: content-box;
}

.main-menu {
  .activity-card {
    min-width: calc(min(350px, 90vw));

    a.card-section {
      z-index: 100;
      width: 100%;
    }
  }
}

// us this, if you dynamically hide elements in a dot list (not the last!)
.dot-list {
  & > *:not(:last-child)::after {
    content: "\00b7";
    margin: 0 0.5em;
  }
}

// us this, if you dynamically hide elements in a dot list (not the first!)
.dot-list-dot-before {
  & > *:not(:first-child)::before {
    content: "\00b7";
    margin: 0 0.5em;
  }
}

.dot-after {
  &::after {
    content: "\00b7";
    margin: 0 0.5em;
  }
}

.additional-comments {
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background: $color-bg-2;
  color: $color-text-1;
  font-weight: $global-weight-bold;
  font-size: $small-font-size;
}

.post-tags {
  display: flex;
  flex-wrap: wrap;
  font-size: $small-font-size;
  margin: -0.25rem;

  a {
    padding: 0.25rem;
    width: initial;
  }
}

.comment-reply-content {
  width: 100%;
  align-items: flex-end;
  flex-wrap: nowrap;
  justify-content: flex-end;

  textarea {
    &.comment-reply-text {
      min-height: initial;
      height: initial;

      &,
      &:focus,
      &:active {
        border: none;
      }
    }
  }

  .comment-reply-submit {
    position: absolute;
  }
}

.report-card .report-header,
.page-section .page-header {
  @include dynamic-box;
}

.user-generated {
  align-items: flex-start;
  overflow-wrap: break-word; /* break long links in post-content. */
  & > * {
    width: 100%;
  }

  .alignfull,
  .alignwide {
    @include dynamic-box($edge: margin, $negative: true, $axis: horizontal);

    &:not(.no-margin) {
      @each $breakpoint, $width in $breakpoints {
        @include breakpoint($breakpoint) {
          margin-block: 1rem;
        }
      }
    }
  }

  /* .alignfull > * {
		margin-inline: -#{nth(map-get($padding-sizes, medium), 2)}; // negate .card-section
	}  */

  a:hover {
    text-decoration: underline;
  }
}

.post-card .post-content,
.report-card .report-content,
.page-section .page-content {
  @include dynamic-box;
}

// 8. Clipping
// ---------

.clipped {
  position: relative;
  display: flex;
  align-content: center;
  width: 100%;
  overflow: hidden;

  img {
    // this shows the upper third of the image. think about images with people where you don't want to crop heads...
    object-position: 50% 33%;

    &[src=""],
    &:not([src]) {
      display: none;
    }
  }

  img,
  iframe {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;
    background: $color-bg-2;

    /* IE 9+ Hack for object-fit. Possibly good option as standard as well */
    @media screen and (width >= 0\0) and (resolution >= +72dpi) {
      height: auto;
      transform: translate(-50%, -50%);
    }
  }

  &.tint {
    color: $color-bg-0;
    background-color: $color-text-0;

    &::after {
      content: "";
      position: absolute;
      z-index: 1;
      width: 100%;
      height: 100%;
      pointer-events: none;
      background-color: $color-text-0;
      opacity: 0.375;
      transition: opacity $global-transition-medium $global-transition-timing;
    }

    & > *:not(img) {
      z-index: 10;
    }

    img,
    iframe {
      z-index: 0;
    }

    &.tint-negativ {
      color: $color-text-0;
      background-color: $color-bg-0;

      &::after {
        background-color: $color-bg-0;
      }
    }
  }

  a:hover &.tint,
  .is-active &.tint {
    &::after {
      opacity: 0.625;
      transition: opacity $global-transition-medium $global-transition-timing;
    }
  }

  &.square {
    padding-bottom: 100%;
    height: 0;
  }

  &.letterbox {
    padding-bottom: 56.25%;
    height: 0;
  }

  &.space-header {
    background: $color-bg-2;

    // height: 64px;
    height: 80px;

    .large > &,
    .large > a > & {
      height: 200px;
      max-height: 25vw;
      min-height: 64px;
    }

    .activity-card > & {
      height: 36px;
    }
  }

  &.line {
    background: $color-bg-2;
    height: 10px;

    &::after {
      content: "";
      position: absolute;
      width: 100%;
      height: 100%;
      pointer-events: none;
      backdrop-filter: blur(50px) saturate(200%);
      backdrop-filter: blur(20px);
      transition: background-color $global-transition-medium
        $global-transition-timing;
    }
  }

  &.feature-image {
    background: $color-bg-1;
    height: 100px;

    &.large {
      height: 200px;
    }
  }

  &.variable {
    padding-bottom: 0;
    height: 100%;
    max-height: 200px;

    img {
      position: relative;
    }
  }

  &.full {
    padding-bottom: 100vh;
  }

  .add-new {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 80px;
    width: 100%;
    background: $color-bg-1;
    color: $color-text-1;
    font-size: 1.25rem;

    &::after {
      content: "\f055";
      font-family: "Font Awesome 6 Free";
      font-weight: bold;
    }
  }

  @for $i from 1 through 8 {
    $number: $i * 50;

    &.height-#{$number} {
      height: 100%;
      padding-bottom: #{$number}px;
    }
  }
}

// 9. Dropdown
// -----------

.dropdown-pane,
.popover {
  max-width: 100%;
  box-shadow: $global-drop-shadow;
  background-color: $color-bg-1;
  font-size: $small-font-size;
  min-width: 200px;

  &[id^="user-"][id$="-dropdown"].is-open {
    display: flex;

    .remove-user {
      order: 5;
    }

    .change-role > a {
      @extend .padding-button;
    }
  }

  &.is-open {
    z-index: 2000;
  }

  .card-divider,
  .card-section {
    & > a,
    button {
      cursor: pointer;
      line-height: 1rem;
      box-sizing: content-box;
    }
  }
}

.info-chips {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  font-size: rem-calc($global-font-size * 0.875);
  max-width: 100%;
  padding: 1px;

  &.small {
    font-size: rem-calc($global-font-size * 0.75);
  }

  &.large {
    font-size: rem-calc($global-font-size);
  }

  .flex-nowrap & {
    flex-wrap: nowrap;
    overflow: hidden;

    .info-chip {
      overflow: hidden;

      span {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }
    }
  }

  .post-card-footer &:last-child {
    padding: $button-padding;
  }

  &.no-margin {
    margin: 0 -3px;
  }

  @each $color-name, $color in $foundation-palette {
    &.#{$color-name} span {
      background: $color-bg-2;
      border-color: $color-bg-2;
    }
  }

  @include foundation-palette(
    $child: ".info-chip span:last-child",
    $property: "border-color",
    $hover: "false"
  );
  @include foundation-palette(
    $child: ".info-chip span:last-child",
    $property: "background",
    $hover: "false"
  );
}

.info-chip {
  text-decoration: none !important;
  display: flex;
  background: $color-bg-1;
  color: $color-text-0;
  margin: 0.25em;
  padding: 0 !important;
  margin-left: 0;
  border-radius: $global-radius;
  overflow: hidden;
  line-height: 1.3;
  text-align: center;
  cursor: default;
  box-shadow: $info-border-shadow;

  &[href] {
    /* the element has the href attr set, so it is clickable (if not .disable). */
    cursor: pointer;
    box-shadow: $info-border-shadow,
      0 1px 1px 0 color-mix-opacity(#{$color-text-0}, 6%, 94%);
    border: 1px solid $color-border-0;
  }

  &[href]:hover {
    // color: $color-text-0;
    box-shadow: $info-border-shadow,
      0 1px 1px 0 color-mix-opacity(#{$color-text-0}, 25%, 75%);
    border: 1px solid $color-border-0;
  }

  &.round {
    & > span {
      padding: $info-chip-padding-round;
    }

    border-radius: 2rem;
  }

  &.hollow {
    &,
    span,
    span:last-child {
      background: none;
    }
  }

  &.clear {
    width: 100%;
    background: none;
    margin: 1em 0;
    flex-direction: column;
    text-align: left;
    color: $color-text-2;

    &:first-child {
      margin-top: 0;
    }

    &:last-child {
      margin-bottom: 0;
    }

    & > span,
    & > div,
    & > a {
      display: block;
      padding: 0;
      border: none;

      &:last-child {
        color: $color-text-0;
        background: none;
      }
    }
  }

  & > span {
    display: inline-block;
    padding: $info-chip-padding;
    align-self: center;
    border-right: 1px solid $color-bg-2;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;

    &:first-child {
      border-top-left-radius: $global-radius;
      border-bottom-left-radius: $global-radius;
    }

    &:last-child {
      @include foundation-palette($property: "background", $hover: "false");
      @include foundation-palette($property: "border-color", $hover: "false");

      border-right: none;
    }

    &:nth-child(2) {
      // background: linear-gradient(120deg, $color-bg-1 0%, $color-bg-2 100%);
      background: $color-bg-2;
    }
  }

  & > .icon {
    line-height: 1.1rem;
  }

  a {
    display: inline-block;
    padding: $info-chip-padding;
    background: $color-bg-2;
    color: inherit;
    text-decoration: none;
  }

  a:hover > & {
    box-shadow: $info-border-shadow,
      0 1px 1px 0 color-mix-opacity($color-text-0, 25%, 75%);
  }
}

.section_footer > .info-chips {
  @extend .show-for-medium;
}

.user-space-info {
  line-height: $header-lineheight;
}

// 10. Switch, Checkbox & Radio
// ---------

.label-wrapper {
  display: flex;
  align-items: center;
  width: 100%;

  & > *:first-child {
    margin-right: 0.5rem;
  }
}

.switch {
  .icon-left & {
    margin-left: auto;
  }

  [disabled] ~ .switch-paddle {
    opacity: 0.5;
  }

  .switch-paddle {
    padding: 0;
    display: flex;
    align-items: center;
    border-radius: 0;
    height: 100%;
    background: none;

    &::before {
      content: "";
      background: $color-text-1;
      background: color-mix(in oklab, $color-text-0 22%, $color-bg-1 78%);
      height: 2px;
      width: 100%;
    }

    &::after {
      content: "";
      top: initial;
      left: 0;
      border-radius: 50%;
      box-shadow: inset 0 0 0 2px
        color-mix(in oklab, $color-text-0 22%, $color-bg-1 78%);
    }
  }

  input:checked ~ .switch-paddle {
    background: none;

    &::after {
      box-shadow: inset 0 0 0 2em currentcolor;
    }
  }

  @include foundation-palette($child: "input:checked ~ .switch-paddle");
}

///
/// 🚨 Is this ever used? It looks horrendous.
///
.switch-with-labels {
  margin-right: 0.25rem;
  height: auto;
  align-items: flex-start;

  .switch-paddle {
    width: 4rem;
    flex: 0 0 4rem;
    margin: 0;
  }

  input:checked {
    ~ .switch-paddle::after {
      left: 2rem;
    }

    ~ .switch-paddle .switch-label-left {
      color: $color-bg-1;
    }

    ~ .switch-paddle .switch-label-right {
      color: $color-text-0;
      zoom: 1;
    }

    ~ .switch-label-description-left {
      display: none;
    }

    ~ .switch-label-description-right {
      display: block;
    }
  }

  .switch-paddle::before {
    height: $button-height;
    border-radius: 20px;
  }

  .switch-paddle::after {
    width: $button-height;
    height: $button-height;
    box-shadow: inset 0 0 0 2px $color-text-2 !important;
  }

  .switch-label-left,
  .switch-label-right {
    position: absolute;
    z-index: 999;
    color: $color-bg-1;
    zoom: 0.9;
    transition: zoom 0.5s;
  }

  .switch-label-left {
    left: 0.5rem;
    color: $color-text-0;
    zoom: 1;
  }

  .switch-label-right {
    right: 0.5rem;
  }

  .switch-label-description-right {
    display: none;
  }

  .switch-label-description-left,
  .switch-label-description-right {
    color: $color-text-0;
    margin-left: 10px;
  }
}

.switch-input {
  pointer-events: none;
}

.checkbox,
.radio {
  display: flex;
  align-items: center;

  input {
    position: absolute;
    opacity: 0;
  }

  @include foundation-palette;

  font-size: $switch-height;

  &.small {
    font-size: $switch-height-small;
  }

  &.large {
    font-size: $switch-height-large;
  }

  .label-wrapper {
    & > label {
      padding-left: 0.5rem;
    }
  }
}

label > [disabled] ~ * {
  opacity: 0.5; // we use nested labels. if a label inside a label is disabled, we assume that the siblings are also disabled.
}

.checkbox-label,
.radio-label {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  font-size: $switch-height;
  line-height: 1;
  margin: 0;
  width: initial;

  .small > & {
    font-size: $switch-height-small;
  }

  .large > & {
    font-size: $switch-height-large;
  }

  [disabled] ~ & {
    opacity: 0.5;
  }

  [type="checkbox"] + &,
  [type="radio"] + & {
    margin: 0;
  }
}

// Checkbox

.checkbox {
  &.round {
    .checkbox-label {
      &::before {
        border-radius: 50%;
      }
    }
  }

  // Unchecked
  .checkbox-label {
    height: 1.125em;

    &::before {
      content: "";
      box-shadow: inset 0 0 0 2px $color-text-2;
      border-radius: $global-radius-small;

      // z-index: 1;
      transition: all $global-transition-medium;
      height: 1em;
      width: 1em;
    }

    &::after {
      content: "";
      position: absolute;
      width: 0.3em;
      height: 0.55em;
      border-bottom: 2px solid transparent;
      border-right: 2px solid transparent;
      transform: rotate(45deg) translate(0.03125em, 0.03125em);
      z-index: 2;
      transition: all $global-transition-medium;
    }

    &.small {
      .checkbox-label {
        &::before {
          box-shadow: inset 0 0 0 1px $color-text-2;
        }

        &::after {
          border-width: 1px;
        }
      }
    }
  }

  // Checked
  input:checked ~ .checkbox-label {
    &::before {
      box-shadow: inset 0 0 0 2em currentcolor;
      transition: all $global-transition-medium;
    }

    &::after {
      transform: rotate(45deg) translate(-0.03125em, -0.03125em);
      transition: all $global-transition-short;
      transition-delay: $global-transition-short;
      border-color: $color-bg-1;
    }
  }
}

.radio {
  // Unchecked
  .radio-label {
    height: 1em;

    &::before {
      content: "";
      position: absolute;
      box-shadow: inset 0 0 0 2px $color-text-2;

      // z-index: 1;
      transition: all $global-transition-medium;
      border-radius: 1em;
      height: 1em;
      width: 1em;
    }
  }

  // Checked
  input:checked ~ .radio-label {
    &::before {
      box-shadow: inset 0 0 0 calc(0.5em - 2px) currentcolor;
      transition: all $global-transition-medium;
    }
  }
}

.radio-accordion {
  list-style: none;

  @include foundation-palette($child: ".radio-label");

  .radio {
    height: auto;

	&:has(input[type="radio"]:focus-visible) {
		outline: 2px solid Highlight;
		outline-offset: 2px;
		border-radius: 4px;
	}
  }

  .radio-accordion-item {
    padding: 0.625rem 0;

    &:last-child {
      padding-bottom: 0;
    }
  }

  .radio-label::before {
    position: relative;
  }

  .radio-accordion-content {
    margin-top: 0.375rem;

    &:not(.visible) {
      display: none;
    }
  }

  &.is-accordion-submenu {
    margin-left: 0;
  }
}

// 11. Button & Input
// ---------

[type="text"],
[type="password"],
[type="date"],
[type="datetime"],
[type="datetime-local"],
[type="month"],
[type="week"],
[type="email"],
[type="number"],
[type="search"],
[type="tel"],
[type="time"],
[type="url"],
[type="color"] {
  height: $input-height;
  padding: $label-padding;
  line-height: $form-label-line-height;
}

[type="checkbox"],
[type="radio"] {
  & + label {
    display: flex;
  }
}

select {
  height: $input-height;
  padding: $label-padding;
  padding-right: 1.5rem;
  line-height: $form-label-line-height;

  & + button,
  & + .button {
    height: $input-height;
  }

  &:first-child {
    margin-top: 0;
  }

  &:last-child {
    margin-bottom: 0;
  }
}

.input-group {
  margin: 0;

  .input-group-label {
    padding: $label-padding;
  }

  .input-group-field {
    &:first-child {
      border-radius: $global-radius 0 0 $global-radius;
    }

    &:last-child {
      border-radius: 0 $global-radius $global-radius 0;
    }
  }
}

input,
.input {
  &.clear {
    border-color: transparent;
  }
}

.help-text {
  margin-top: 0.375rem;
  font-size: 0.75rem;
  font-style: normal;
  color: $color-text-1;
  line-height: 1.3;
}

.form-error {
  margin-top: 0.375rem;
  line-height: 1.3;
}

.button {
  justify-content: center;
  align-items: center;

  &:not(.small) {
    min-height: $button-height;
  }

  &.expanded {
    box-sizing: border-box;
  }

  .menu & {
    padding: $button-padding;
  }

  &.load {
    transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1) 0s;
    color: $color-text-0 !important;

    // background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
    // background-size: 300% 300%;
    background-color: var(--f-color-success);
    animation: background-pulse 2s $global-transition-timing-cubic-bezier
      infinite;
  }
}

.button-group {
  border-radius: $global-radius;
  overflow: hidden;

  &:not(.no-gaps) {
    gap: 1px;
  }

  input {
    width: initial;
  }

  button,
  .button,
  select,
  input {
    margin-bottom: 0;

    &:hover {
      z-index: 1;
    }

    &:not(:first-child, :last-child) {
      border-radius: 0;
    }

    &:first-child:not(:last-child) {
      border-radius: $global-radius 0 0 $global-radius;
    }

    &:last-child:not(:first-child) {
      margin-right: 0;
      border-radius: 0 $global-radius $global-radius 0;
    }

    &.hollow {
      &:not(:last-child) {
        margin-right: -1px;
      }
    }

    &.expanded {
      flex: 1;
      width: initial;
    }
  }

  button,
  .button {
    &:not(.hollow) + .hollow {
      margin-left: -2px;
    }
  }

  &.hollow {
    button,
    .button,
    select,
    input {
      &:first-child {
        border-radius: $global-radius 0 0 $global-radius;
      }

      &:last-child {
        border-radius: 0 $global-radius $global-radius 0;
      }

      &:not(:last-child) {
        margin-right: -1px;
      }
    }
  }

  &.expanded {
    width: 100%;

    button,
    .button,
    select {
      &:not(:last-child) {
        margin-right: 1px;
      }
    }
  }
}

.input-group {
  button,
  .button,
  input,
  .input,
  select,
  textarea {
    margin-bottom: 0;
  }

  input.clear:not(:focus) {
    border-color: transparent;
  }

  margin-bottom: $paragraph-margin-bottom;
}

// button,
// input,
// select,
// textarea,
.button,
.input,
.button-group {
  line-height: $form-label-line-height;

  &:focus,
  &:active {
    outline: none;
  }

  &:last-child {
    margin-bottom: 0;
  }

  .card-section.no-padding:not(:first-child) > &,
  .card-divider.no-padding:not(:first-child) > & {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }

  .card-section.no-padding:not(:last-child) > &,
  .card-divider.no-padding:not(:last-child) > & {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }
}

@keyframes gradient {
  0% {
    background-position: 0% 50%;
  }

  50% {
    background-position: 100% 50%;
  }

  100% {
    background-position: 0% 50%;
  }
}

@keyframes background-pulse {
  0% {
    background-color: var(--f-color-success);
  }

  50% {
    @include color-mix("bg", var(--f-color-success), 51%, transparent, 49%);
  }

  100% {
    background-color: var(--f-color-success);
  }
}

// autosize textarea
// put textarea inside a div with class "grow-wrap
// and add oninput="this.parentNode.dataset.replicatedValue = this.value" to textarea

.grow-wrap {
  display: grid;

  &::after {
    content: attr(data-replicated-value) " ";
    white-space: pre-wrap;
    visibility: hidden;
  }

  > textarea,
  &::after {
    padding: 0.75rem;
    font: inherit;

    /* font-size: 1rem; */
    line-break: normal;
    padding-right: 2rem;
    grid-area: 1 / 1 / 2 / 2;
  }

  > textarea {
    field-sizing: content;
  }
}

// 12. Dot Menu
// ---------

.dots,
.add {
  cursor: pointer;
  z-index: 50;
  width: $button-height;
  height: $button-height;

  // color: $color-text-1;
  // color: $color-text-1;

  &::after {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: $button-height;
    line-height: 0;
    font-weight: $global-weight-bold;
    font-size: 1.25rem;
    white-space: nowrap;
    color: $color-text-2;
  }

  &.button {
    &::after {
      height: 0.5rem;
    }
  }

  .button & {
    margin: -0.5em -0.75em;
  }

  &.hidden {
    display: none;
  }

  &.visible {
    display: block !important;
  }
}

.dots {
  padding-bottom: 0.675rem;

  &::after {
    content: "...";
    letter-spacing: 0.03125rem;
    margin-top: -0.65rem;
  }
}

.add {
  &::after {
    content: "+";
    height: $button-height;
  }
}

.reply-button {
  a {
    &::after {
      content: "reply";
      padding: 0.5rem;
      font-size: 0.75rem;
      color: $color-text-1;
    }

    &:hover::after {
      color: $color-text-0;
    }
  }
}

.edit-bar {
  display: flex;
  align-items: center;
  margin-left: auto;
}

// 13. Excerpt
// ---------

.description-excerpt {
  @include excerpt($lines-to-show: 3);
}

.description-excerpt-checkbox {
  position: absolute;
  margin: 0;
  opacity: 0;

  &:checked ~ .description-excerpt {
    @include excerpt($expand: true);
  }

  & + label {
    vertical-align: initial;
    margin: initial;
  }
}

// 14. Menu
// ---------

.menu {
  a,
  .button {
    display: flex;

    &.no-padding {
      padding: 0;
    }
  }

  li {
    &[role="menuitem"],
    &[role="treeitem"] {
      list-style: none;
    }
  }
}

.main-menu {
  --header-height: var(--user-card--small);

  color: $color-text-1;
  background-color: $color-bg-1;
  position: relative;
  z-index: 1000;

  hr {
    margin: 0 auto;
    border-bottom: $hr-border;
  }

  .menu {
    font-size: 0.875rem;

    &.dropdown {
      flex-wrap: nowrap;

      & > li {
        & > :is(a, span, button) {
          height: var(--header-height);
          min-width: var(--header-height);
          padding-top: 0;
          padding-bottom: 0;
          margin-top: 0.25rem;
          margin-bottom: 0.25rem;
          border-radius: $global-radius;
          color: inherit;
        }
      }
    }

    li {
      &.menu-main-expand {
        position: static;

        .menu {
          width: 100%;
        }
      }

      &.no-arrow {
        & > a {
          padding-right: #{nth($dropdownmenu-padding, 1)};

          &::after {
            display: none;
          }
        }
      }

      input[type="search"] {
        border: none;
        box-shadow: none;
      }

      .menu-anchor {
        fill: currentcolor;
      }
    }

    & > li {
      & > .menu-anchor .fa {
        font-size: 1.25em;
        display: flex;
        align-items: center;
        justify-content: center;
        width: var(--header-height);
        height: var(--header-height);
      }

      &.submenu,
      .submenu-element {
        .fa {
          font-size: inherit;
          width: initial;
          height: initial;
        }
      }
    }

    & > .navbar-icon {
      & > a {
        justify-content: center;
        min-width: 48px;

        & > svg {
          width: 1.125rem;
        }
      }
    }
  }

  .is-dropdown-submenu-parent.avatar {
    width: initial;
    margin-left: var(--f-gutter-small);

    & > a {
      padding: 0 !important;

      &:hover,
      &.is-active {
        transform: scale(0.97);
      }
    }
  }
}

.superadmin-only {
  display: none;

  body.is-superadmin & {
    display: block;
  }
}

#main-menu-toggle-state {
  display: none;
}

.main-menu .menu {
  &.dropdown {
    & > .navbar-icon {
      & > a {
        & > span {
          display: initial;

          & + svg,
          & + i {
            display: none;
          }
        }
      }
    }

    .search {
      margin-left: auto;
    }
  }

  &.accordion-menu {
    justify-content: space-around;
    align-items: center;

    a {
      padding-inline: 0.75rem;
    }

    & > li {
      &.navbar-icon {
        justify-content: center;
        flex-grow: 1;
        flex-basis: 0;

        &.search {
          display: flex;
        }

        & > a {
          & > span {
            display: none;
          }

          &::after {
            display: none;
          }
        }
      }

      & > .menu-anchor {
        height: 48px;
        box-sizing: border-box;
        align-items: center;
        display: flex;
        color: $color-text-1;
        fill: currentcolor;
      }

      &:not(.navbar-icon) {
        display: none;

        /* #menu-state:checked ~ & {
					display: block;

				} */
        #main-menu-toggle-state:popover-open ~ & {
          display: block;
        }
      }

      &.superadmin-only {
        display: none;

        body.is-superadmin & {
          #menu-state:checked ~ & {
            display: block;
          }
        }
      }
    }

    & > .flex-spacer-left {
      margin-left: initial;
    }

    &[data-multi-open="false"]
      .is-accordion-submenu-parent[aria-expanded="true"] {
      box-shadow: none;
      width: 100%;
      margin: initial;
    }
  }
}

.caret {
  content: "\f078";
  font-family: "Font Awesome 6 Free";
  font-size: 0.625em;
  font-weight: bold;
  align-self: center;
  border: none;
}

.caret-icon {
  &::after {
    @extend .caret;
  }
}

.main-menu {
  .is-dropdown-submenu-parent.is-active {
    .menu-anchor {
      background: $color-bg-2;
      color: $color-text-0;
    }
  }

  .dropdown .menu-anchor {
    &:hover {
      background: $color-bg-2;
      color: $color-text-0;
    }
  }

  & > * > .dropdown,
  & > * > .accordion-menu {
    .submenu {
      border-top: $hr-border;
      border-radius: 0 0 $global-radius $global-radius;

      // overflow: hidden; // if you have lots of blogcategories the selectbox is cropped.
      box-shadow: $global-drop-shadow;
      z-index: 1; // enforce drop-shadow hierachie.
      a {
        border-right: none;
      }

      .submenu-element {
        .notifications-item:hover {
          background: $color-bg-2;
        }
      }

      li > .menu-anchor:hover,
      li > .submenu-element:hover {
        background: $color-bg-2;
        color: $color-text-0;
      }

      .is-submenu-item,
      .is-submenu-item {
        &:first-child a.submenu-element {
          padding-top: 1rem;
        }

        &:last-child {
          border-radius: 0 0 $global-radius $global-radius;

          a.submenu-element {
            padding-bottom: 1rem;
          }

          & > *,
          .submenu-element > * {
            border-radius: 0 0 $global-radius $global-radius;
          }
        }
      }

      .card-anchor {
        padding: 0;
      }
    }

    .main-menu-burger {
      & > a {
        padding: 0;
      }
    }
  }
}

.accordion-menu .nested.is-accordion-submenu {
  // margin: multiply-list($dropdownmenu-submenu-padding, -1);
  margin-top: 0.75rem;

  .is-submenu-item {
    border: none;

    // & > a, & > .radio {
    // 	padding-left: 2.25rem;
    // }
  }
}

.accordion-menu .is-accordion-submenu-parent,
.accordion .accordion-item {
  & > a {
    &::after {
      @extend .caret;

      margin-left: auto;
    }

    &[aria-expanded="false"]::after {
      transform: rotate(-90deg);
      transition: $global-transition-medium;
    }

    &[aria-expanded="true"]::after {
      transform: rotate(-180deg);
      transition: $global-transition-medium;
    }
  }

  &[aria-expanded="false"] {
    & > a::after {
      transform: rotate(-90deg);
      transition: $global-transition-medium;
    }
  }

  &[aria-expanded="true"] {
    & > a {
      &::after {
        transform: rotate(-180deg);
        transition: $global-transition-medium;
      }
    }
  }

  &.has-submenu-toggle {
    & > a {
      margin-right: 0;
      padding-right: 36px;
    }

    & > a::after {
      display: none;
    }

    ul {
      button.submenu-toggle {
        height: $paragraph-font-size + nth(map-get($padding-sizes, medium), 1) +
          nth(map-get($padding-sizes, medium), 1);

        &:hover {
          background-color: $color-bg-2;
        }
      }
    }

    button.submenu-toggle {
      text-decoration: none;
      border-radius: 0 $global-radius 0 0;
      height: $paragraph-font-size + nth(map-get($padding-sizes, medium), 1) +
        nth(map-get($padding-sizes, medium), 2);

      &:hover {
        background-color: $color-bg-2;
      }

      &::after {
        position: absolute;
        top: nth(map-get($padding-sizes, medium), 1);
        left: nth(map-get($padding-sizes, medium), 2);

        @extend .caret;
      }

      &[aria-expanded="false"] {
        &::after {
          transform: rotate(-90deg);
          transition: $global-transition-medium;
        }
      }

      &[aria-expanded="true"] {
        &::after {
          transform: rotate(-180deg);
          transition: $global-transition-medium;
          left: auto;
          right: nth(map-get($padding-sizes, medium), 2);
        }
      }
    }
  }
}

.accordion-submenu-parent-collapsed {
  transition: all $global-transition-medium;
}

.accordion-submenu-parent-expanded {
  transition: all $global-transition-medium;
  box-shadow: $global-drop-shadow;
  margin: calc(var(--offset) / 2);
  background: $card-background;
  border-color: $color-bg-2;
  display: block;
  width: calc(100% - var(--offset));
  border-radius: $global-radius;

  & + * {
    border-top: 0;
  }

  & > a {
    border-radius: $global-radius $global-radius 0 0;
    overflow: hidden;
    box-shadow: inset 0 -#{nth($hr-border, 1)} nth($hr-border, 3);
    background: $color-bg-2;
  }
}

.accordion-menu .is-accordion-submenu-parent {
  --offset: #{$global-gutter-small};

  &[aria-expanded="false"] {
    @extend .accordion-submenu-parent-collapsed;
  }

  &[aria-expanded="true"] {
    @extend .accordion-submenu-parent-expanded;
  }
}

.accordion-menu {
  .menu-item {
    & > a:hover {
      background-color: $color-bg-2;
      color: $color-text-0;
    }
  }

  & > .menu-item {
    &:first-child:not(:last-child) > a {
      padding-top: nth($global-menu-padding, 2);
    }

    &:last-child:not(:first-child) > a {
      padding-bottom: nth($global-menu-padding, 2);
    }
  }

  .sub-menu {
    margin-left: nth($global-menu-padding, 2);
  }

  .button {
    text-align: left;
  }

  & > .navbar-icon {
    position: static;
    width: initial;

    .submenu {
      position: absolute;
      left: 0;
      top: 3rem;
      background: $color-bg-1;
    }
  }
}

.dropdown {
  & > li > a {
    display: flex;
    align-items: center;
    height: 48px;
    box-sizing: border-box;
  }

  &.menu {
    & > li {
      img.avatar {
        padding: 0;
      }

      &.no-padding > a,
      & > a.no-padding {
        padding: 0 !important;
      }

      & > a {
        @include breakpoint(medium down) {
          padding: 0.5rem;
        }
      }

      &.is-dropdown-submenu-parent {
        .is-dropdown-submenu {
          background-color: $color-bg-1;
        }
      }

      &.is-dropdown-submenu-parent > a {
        &::after {
          @extend .caret;

          margin-right: 0.75rem;
          line-height: 0.75;
        }
      }

      &.is-dropdown-submenu-parent:not(.no-arrow) > a {
        @include breakpoint(medium down) {
          padding-right: 1.25rem;
        }
      }
    }
  }
}

li {
  & > label,
  & > span,
  & > a {
    .menu.icon-left > &,
    .menu.icon-right > & {
      width: 100%;
      display: flex;
      flex-flow: row nowrap;
      align-items: center;
      justify-content: flex-start;
    }
  }
}

// 15. Icons
// ---------

.icons {
  &.icon-left {
    i {
      margin-left: 0;
      margin-right: 0.5rem;
    }
  }

  &.icon-right {
    i {
      margin-left: 0.5rem;
      margin-right: 0;
    }
  }
}

i,
svg {
  .icons & {
    font-size: 0.75rem;
    width: 1.5em;
    display: flex;
    justify-content: center;
  }

  .icons.icon-left > & {
    margin-right: $menu-icon-spacing;
  }

  .icons.icon-right > & {
    margin-left: $menu-icon-spacing;
  }
}

i.fa {
  font-style: normal;
}

// allow slashing any icon.
.fa.slash::after,
.fas.slash::after {
  position: absolute;
  transform: translateX(-90%);

  /* fa-slash */
  content: "\f715";
  text-shadow: 0 2px $color-bg-1;
  animation-duration: 0.3s;
  animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
  animation-name: clip-top-left-to-bottom-right;
}

@keyframes clip-top-left-to-bottom-right {
  from {
    clip-path: polygon(0 0, 0 0, 0 0, 0 0);
  }

  to {
    /* full square */
    clip-path: polygon(100% 100%, 100% 0%, 0 0, 0% 100%);
  }
}

.sandwich-icon,
.search-icon,
.flat-arrow-down-icon {
  cursor: pointer;
  border-radius: 20px;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 48px;
  height: 48px;
  padding: 12px;
  color: inherit;
  box-sizing: border-box;

  &::before,
  &::after {
    content: "";
    position: absolute;
    display: block;
    height: $icon-line-weight * 1px;
    box-shadow: inset 0 0 0 $icon-line-weight * 1px currentcolor;
    transition-duration: $global-transition-medium;
    transition-timing-function: $global-transition-timing-cubic-bezier;
  }
}

.search-icon {
  &::before,
  &::after {
    transition-property: width, height, border-radius, transform;
  }

  &::before {
    height: 14px;
    width: 14px;
    border-radius: 20px;

    @include cross-browser(transform, rotate(0));

    .search-container.is-active ~ & {
      height: 20px;
      width: $icon-line-weight * 1px;
      border-radius: 0;

      @include cross-browser(transform, rotate(45deg));
    }
  }

  &::after {
    width: 6px;

    @include cross-browser(transform, translate(6px, 6px) rotate(45deg));

    .search-container.is-active ~ & {
      width: 20px;

      @include cross-browser(transform, translate(0) rotate(45deg));
    }
  }
}

/*
 * @todo: Typeahead things don't belong here. Make helper classes where needed and move to the plugin.
*/
.search-container {
  position: fixed;
  display: flex;
  justify-content: center;
  top: 4vh;
  left: 0;
  z-index: 100;
  width: 100vw;
  pointer-events: none;

  @each $breakpoint, $width in $breakpoints {
    @include breakpoint($breakpoint) {
      $grid-container-gutter: map-get($grid-container-padding, #{$breakpoint});

      padding: 0 $grid-container-gutter;
    }
  }

  .spinner-container {
    z-index: 100;
    transform: translateX(-100%);
    position: absolute;
    right: 40px;
    top: 20px;
  }

  &:not(.is-active) {
    .spinner-container {
      display: none !important;
    }
  }

  &::after {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 10;
    background: $color-text-0;
    opacity: 0;
    will-change: opacity;
    transition: $global-transition-medium;
  }

  span.twitter-typeahead {
    opacity: 0;
    pointer-events: none;
    z-index: 100;
    box-shadow: $global-drop-shadow;
    height: initial !important;
    transform: scale(0.97);
    transition: $global-transition-medium;
    width: auto;
    max-width: calc(min(480px, 95vw));
  }

  input.twitter-typeahead {
    height: $user-card-default-size;
    border: none;
    padding: $global-padding;
    width: map-get($breakpoints, "medium");
    max-width: 100%;

    &.is-active {
      border-radius: $global-radius-small $global-radius-small 0 0;
      border-bottom: $hr-border;
    }
  }

  &.is-active {
    pointer-events: all;

    &::after {
      opacity: 0.5;
      will-change: opacity;
      transition: $global-transition-medium;
    }

    span.twitter-typeahead {
      opacity: 1;
      pointer-events: all;
      transform: scale(1);
      transition: $global-transition-medium;
      box-shadow: $global-drop-shadow-large;
    }
  }

  .tt-menu {
    position: relative !important;
    top: 0 !important;
    max-height: 82vh;
    overflow-y: auto;
  }
}

.user.tt-suggestion.cursor,
.user.tt-suggestion:hover,
.user.global-search-suggestion:hover {
  background-color: $color-bg-2;
  cursor: pointer;
}

.twitter-typeahead.tt-hint {
  display: none;

  .search-container.is-active & {
    display: block;
  }
}

#menu-state {
  display: none;
}

.sandwich-icon {
  display: flex;
  align-items: center;
  justify-content: center;

  &::before,
  &::after {
    width: 20px;
    transition-property: transform;
  }

  &::before {
    @include cross-browser(transform, translate(0, -5px) rotate(0deg));

    #main-menu-toggle-state:popover-open ~ nav &,
    #menu-state:checked ~ nav & {
      @include cross-browser(transform, translate(0, 0) rotate(-45deg));
    }
  }

  &::after {
    @include cross-browser(transform, translate(0, 5px) rotate(0deg));

    #main-menu-toggle-state:popover-open ~ nav &,
    #menu-state:checked ~ nav & {
      @include cross-browser(transform, translate(0, 0) rotate(45deg));
    }
  }
}

.flat-arrow-down-icon {
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1;

  &::before,
  &::after {
    width: 20px;
    transition-property: transform;
  }

  &::before {
    @include cross-browser(transform, translate(-45%, 0) rotate(22.5deg));

    .is-active & {
      @include cross-browser(transform, translate(-45%, 0) rotate(-22.5deg));
    }
  }

  &::after {
    @include cross-browser(transform, translate(45%, 0) rotate(-22.5deg));

    .is-active & {
      @include cross-browser(transform, translate(45%, 0) rotate(22.5deg));
    }
  }
}

// 16. Tabs
// ---------

.tabs {
  display: flex;
  overflow: hidden;
  font-size: $paragraph-font-size;
  border: 0;

  &::before,
  &::after {
    width: 0;
  }

  &.small {
    font-size: $small-font-size;
  }

  &.large {
    font-size: $global-font-size;
  }

  .tabs-title {
    display: flex;
    align-items: center;
    text-align: center;
    float: initial;
    min-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;

    & > a {
      overflow: hidden;
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      color: inherit;
      min-height: 36px;
      line-height: initial !important;

      & > *:last-child:not(:first-child) {
        margin-left: 0.5em;
      }

      span {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }
    }

    &.is-active-tab,
    &.is-active {
      & > a {
        background: $color-bg-2;
        color: $color-text-0;
      }
    }
  }

  &.expanded {
    .tabs-title {
      width: 100%;
    }
  }

  &.label-is-active {
    .tabs-title {
      min-width: auto;
      overflow: initial;

      span {
        max-width: 150px;
        transition: max-width $global-transition-long;
        line-height: $header-lineheight;
        overflow: hidden;
      }

      &:not(.is-active) {
        span {
          transition: all $global-transition-medium;
          margin-left: 0;
          max-width: 0;
        }
      }
    }
  }

  &.line {
    .tabs-title {
      & > a {
        &:hover {
          background: none;

          // box-shadow: inset 0 -2px color-mix-opacity(#{$color-text-0}, 83%, 17%);
          box-shadow: inset 0 -2px $color-border-2;
        }

        &:focus {
          background: none;
        }

        &.is-active-tab,
        &.is-active {
          background: none;
          box-shadow: inset 0 -2px $color-border-0;
        }
      }

      &.is-active-tab,
      &.is-active {
        & > a {
          background: none;
          box-shadow: inset 0 -2px $color-text-1;
        }
      }
    }

    & + .tabs-content .tabs-panel {
      border-top: #{nth($hr-border, 1)} solid $color-border-2;
    }
  }

  &.bar {
    border-bottom: none;

    .tabs-title {
      border-right: $hr-border;

      &:last-child {
        border-right: none;
      }

      & > a {
        &:hover {
          background: $color-bg-2;
        }

        &:focus,
        &[aria-selected="true"] {
          background: $color-bg-2;
        }
      }
    }
  }

  &.image {
    .tabs-title {
      text-align: left;

      .title {
        position: absolute;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: flex-end;
        flex-direction: column;
        padding: $global-padding;
        font-weight: $global-weight-bold;
        line-height: $header-lineheight;
        z-index: 10;
        pointer-events: none;

        & > * {
          pointer-events: all;
        }

        & > span {
          margin-bottom: $header-margin-bottom;
          white-space: initial;

          &:last-child {
            margin-bottom: initial;
          }
        }

        @include header-style("h3", "font-size");
      }
    }
  }

  // &[id*="menu"],
  // &.line {
  // 	border: 0;
  // 	padding: 0;
  // 	gap: unset;
  // }
}

.tabs-content {
  // border: none;
  border: none;

  &[data-transition] .tabs-panel {
    display: none;
  }

  // .card>&:last-child {
  // 	border-radius: 0 0 $global-radius $global-radius;
  // }
}

.tabs-panel.is-active-tab {
  display: block;
}

// 17. Sections
// -----------

.section-title {
  @include header-style("h1");

  font-weight: $global-weight-bold;
  line-height: $header-lineheight;
}

.section-header {
  @include header-style("h2");

  font-weight: $global-weight-normal;
  line-height: $header-lineheight;
}

.section-wrap {
  margin: 2rem auto;
  width: 100%;
  max-width: $global-width;

  &.small {
    max-width: calc(#{$global-width} / 3 * 2);
  }

  @include breakpoint(medium) {
    width: $global-width;
  }
}

// 19. Utilities
// ---------

.flex-spacer-left {
  margin-left: auto;
}

.flex-spacer-right {
  margin-right: auto;
}

.flex-spacer-around {
  margin-inline: auto;
}

.width-article {
  width: 640px;
}

.no-border {
  border: 0;
}

.no-padding {
  padding: 0;

  & > a {
    display: flex;
  }
}

.dynamic-padding {
  @include dynamic-box;
}

.disabled {
  opacity: 0.5;
  pointer-events: none;
  cursor: not-allowed;
}

@each $size-name, $size in $padding-sizes {
  .margin-#{$size-name} {
    margin: $size;
  }
  .p-#{$size-name},
  .padding-#{$size-name} {
    padding: $size;

    & > a,
    & > a:last-child {
      &,
      & > label {
        display: flex;
        align-items: center;
        width: 100%;
        padding: $size;

        @if length($size) >3 {
          margin: (nth($size, 1) * -1)
            (nth($size, 2) * -1)
            (nth($size, 3) * -1)
            (nth($size, 4) * -1);
        } @else if length($size) >2 {
          margin: (nth($size, 1) * -1)
            (nth($size, 2) * -1)
            (nth($size, 3) * -1);
        } @else if length($size) >1 {
          margin: (nth($size, 1) * -1) (nth($size, 2) * -1);
        } @else {
          margin: $size * -1;
        }
      }

      & + * {
        margin-top: nth($size, 1);
      }
    }
  }
  .px-#{$size-name} {
    padding-inline: $size;
  }
  .py-#{$size-name} {
    padding-block: $size;
  }
  .pr-#{$size-name} {
    padding-inline-end: if(length($size) > 1, nth($size, 2), $size);
  }
  .pl-#{$size-name} {
    padding-inline-start: if(length($size) > 1, nth($size, 2), $size);
  }
  .pt-#{$size-name} {
    padding-block-start: if(length($size) > 1, nth($size, 1), $size);
  }
  .pb-#{$size-name} {
    padding-block-end: if(length($size) > 1, nth($size, 1), $size);
  }
}

.gutter {
  @each $breakpoint, $width in $breakpoints {
    @include breakpoint(#{$breakpoint} only) {
      $gutter: map-get($grid-margin-gutters, #{$breakpoint});

      margin: $gutter !important;

      &-vertical {
        margin-block: $gutter !important;
      }

      &-horizontal {
        margin-inline: $gutter !important;
      }

      &-left {
        margin-inline-start: $gutter !important;
      }

      &-top {
        margin-block-start: $gutter !important;
      }

      &-right {
        margin-inline-end: $gutter !important;
      }

      &-bottom {
        margin-block-end: $gutter !important;
      }

      &-padding {
        padding: $gutter !important;

        &-vertical {
          padding-block: $gutter !important;
        }

        &-horizontal {
          padding-inline: $gutter !important;
        }

        &-left {
          padding-inline-start: $gutter !important;
        }

        &-top {
          padding-block-start: $gutter !important;
        }

        &-right {
          padding-inline-end: $gutter !important;
        }

        &-bottom {
          margin-block-end: $gutter !important;
        }
      }
    }
  }
}

.flex {
  display: flex !important;
}

.flex-justify-between {
  justify-content: space-between;
}

.flex-align-center {
  align-items: center;
}

.align-flex-start {
  justify-content: flex-start;
}

.align-flex-end {
  justify-content: flex-end;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-nowrap {
  flex-wrap: nowrap;
}

.flex-grow-1 {
  flex-grow: 1;
}

.flex-grow-0 {
  flex-grow: 0;
}

.flex-shrink-1 {
  flex-shrink: 1;
}

.flex-shrink-0 {
  flex-shrink: 0;
}

// 21. Spinner
// ---------

.spinner {
  border: 2px solid color-mix-opacity(#{$color-text-0}, 83%, 17%);
  border-radius: 50%;
  border-top: 2px solid var(--f-palette--primary);
  animation: spin 0.875s infinite cubic-bezier(0.9, 0.3, 0.3, 0.7);
  width: 1.5rem;
  height: 1.5rem;

  @each $size-name, $size in $spinner-sizes {
    &.#{$size-name} {
      width: $size;
      height: $size;
    }
  }

  &.quick {
    animation-duration: 0.5s;
  }

  &.slow {
    animation-duration: 1.5s;
  }
}

@keyframes spin {
  0% {
    transform: rotate(-20deg);
  }

  100% {
    transform: rotate(340deg);
  }
}

// 22. Typeahead
// ---------

.tt-menu {
  width: 100%;
  background-color: $dropdown-background;
  border-radius: 0 0 $global-radius $global-radius;
  overflow: hidden;
}

.twitter-typeahead,
.global-search-modal,
.tt-input,
.tt-hint {
  width: 100%;
  font-size: $paragraph-font-size;
  margin-bottom: 0;

  .menu & {
    height: 40px;
  }
}

.tt-suggestion,
.global-search-suggestion {
  display: flex;
  align-items: baseline;

  span,
  small {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
  }

  small {
    font-size: $small-font-size;
  }

  &.tt-cursor {
    background-color: var(--f-palette--primary);

    span,
    small,
    &::after {
      color: $color-bg-1;
    }
  }

  .card {
    width: 100%;
  }
}

.menu .twitter-typeahead,
.global-search-modal {
  .tt-dataset-blogs:not(:empty) {
    padding: nth(map-get($padding-sizes, medium), 1);

    .tt-suggestion,
    .global-search-suggestion {
      padding: nth(map-get($padding-sizes, medium), 1);
    }
  }

  .tt-suggestion,
  .global-search-suggestion {
    padding: 0;

    .card {
      @extend .margin-medium;
    }

    &.user {
      position: relative;
      display: flex;
      align-items: flex-start;
    }

    .v-center {
      padding: 0;

      .sf-user-image {
        min-width: 48px;
        width: 48px;
        height: 48px;
        margin-left: 0;
        margin-right: 0.875rem;

        img {
          min-width: 48px;
          width: 48px;
          height: 48px;
        }
      }
    }
  }
}

.no-found {
  padding: $button-padding;
  font-size: $small-font-size;
  color: $color-text-2;
}

.add-user-typeahead {
  position: relative;
  width: 100%;
  z-index: 99;

  &::before {
    content: "\f002";
    font-family: "Font Awesome 6 Free";
    font-weight: bold;
    font-size: 0.75rem;
    position: absolute;
    z-index: 1;
    padding: $button-padding;
    color: $color-text-1;
  }

  input {
    width: 100%;
    padding-left: 2rem;

    &,
    &:focus {
      transition: 0ms;
    }

    &:focus:not(:placeholder-shown) {
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
      box-shadow: 0 0 0 100vw color-mix-opacity(#{$color-text-0}, 5%, 95%);
    }
  }

  .tt-menu {
    border-top: $hr-border;
  }

  .tt-suggestion {
    padding: $button-padding;
    line-height: $header-lineheight;
    border-bottom: $hr-border;
    cursor: pointer;

    &:last-child {
      padding-bottom: 10px;
      border: none;
    }

    &.tt-cursor {
      background-color: var(--f-color-success);

      &::after {
        content: "\f055";
        font-family: "Font Awesome 6 Free";
        font-weight: bold;
        margin-left: auto;
        font-size: 0.75rem;
      }
    }
  }

  .spinner-container {
    position: absolute;
    top: 0;
    right: nth($button-padding, 1);
    display: none;
    align-items: center;
    height: 100%;
  }
}

.shake {
  animation: shake 0.4s 1 linear;
}

@keyframes shake {
  8%,
  41% {
    transform: translateX(-0.25em);
  }

  25%,
  58% {
    transform: translateX(0.25em);
  }

  75% {
    transform: translateX(-0.1em);
  }

  92% {
    transform: translateX(0.1em);
  }

  0%,
  100% {
    transform: translateX(0);
  }
}

// 23. Accordion
// ---------

.accordion {
  .accordion-item {
    position: relative;

    // Accordions used for aside widgets will only ever have 1 child. Not including this check will break regular accordions.

    &:first-child:last-child > :first-child {
      word-break: break-word;

      @include cross-browser(hyphens, auto);

      &[aria-expanded="false"] {
        border-radius: $card-border-radius;
      }
    }

    .expand-button {
      position: absolute;
      top: 0;
      right: 0;
      width: $user-card-default-size / 1.5;
      height: $user-card-default-size / 1.5;
      display: flex;
      opacity: 0;
      align-items: center;
      justify-content: center;
      z-index: 100;

      &::after {
        @extend .caret;

        margin-left: 0.5em;
        opacity: 0.5;
      }

      &:hover {
        &::after {
          opacity: 1;
        }
      }
    }
  }

  &:hover {
    .expand-button {
      opacity: 1;
    }
  }
}

.create-space-container,
.card > .accordion {
  .accordion-content {
    border: none;
  }
}

// 24. Paginate
// ---------

.pagination {
  display: flex;
  justify-content: left;

  .page-numbers {
    min-width: 2.25rem;
    min-height: 2.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: $pagination-radius;
    margin: 0 $pagination-item-spacing;

    &.dots {
      cursor: default;
      font-weight: $global-weight-bold;
      font-size: 1.25rem;
      color: $pagination-item-color;

      &::after {
        display: none;
      }
    }

    &.prev,
    &.next {
      i {
        font-size: 0.625em;
      }
    }
  }
}

// 25. Callout
// ---------

.callout {
  &:not(.cell):last-child {
    margin-bottom: 0;
  }

  p {
    line-height: $global-lineheight;
  }
}

// 26. Chips / Choices
// ---------

.chips {
  .input {
    border: $input-border;
    border-radius: $global-radius;
    padding: $input-padding / 2;
    min-height: $button-height;

    input {
      border-radius: 0;
      box-shadow: none;
      border: none;
      height: 1.25rem;
      padding: $input-padding / 2;
    }
  }

  .list-dropdown {
    border: none;
    margin-top: calc(#{nth($hr-border, 1)} * -1);
    border-radius: 0 0 $global-radius $global-radius;
    background-color: $card-background;

    .chips-item {
      font-size: $small-font-size;
      padding: $button-padding;

      &.is-highlighted {
        background-color: $color-bg-2;
      }
    }
  }

  .chips-list.multiple .chips-item {
    font-size: $small-font-size;
    margin: $input-padding / 2;
    border: none;
    background-color: var(--f-color-success);
    padding: 0.375rem 0.75rem 0.25rem;

    .chips-button {
      border-left: 1px solid var(--f-color-success--dark);
      margin: -2px -8px -2px 8px;
      width: 20px;
      height: 16px;
      opacity: 0.75;
      border-radius: 0;
    }

    &.is-highlighted {
      border: none;
      background-color: var(--f-color-success-darker);

      .chips-button {
        border-left: 1px solid var(--f-color-success-darker);
      }
    }
  }

  &.is-focused,
  &.is-open {
    .input,
    .list-dropdown {
      border: $input-border-focus;
    }
  }

  &.is-open {
    .input {
      border-radius: $global-radius $global-radius 0 0;
    }
  }
}

// 27. Breadcrumbs
// ---------

.breadcrumbs {
  /* padding: map-get($padding-sizes, medium); */
  display: flex;
  align-items: center;
  flex-wrap: wrap;

  &.no-padding {
    padding: 0;
  }
}

// 28. Swiper
// ---------

/* prbly no longer needed, inside spacesMarkup > blocks > spaces-overview-block now
 .swiper-pagination.timespans {
	border-bottom: $hr-border;
}

.swiper-pagination-bullet-custom {
	border-radius: 0 !important;
	background: none !important;

	&:hover {
		background: none;
		box-shadow: inset 0 -2px color-mix-opacity($color-text-0, 17%, 83%);
	}

	&:focus {
		background: none;
		outline: none;
	}

	&.swiper-pagination-bullet-active {
		color: inherit !important;
		background: none;
		box-shadow: inset 0 -2px $color-text-2;

		&-prev,
		&-prev-prev,
		&-next,
		&-next-next {
			transform: scale(1) !important;
		}
	}
} */

.tooltip {
  overflow-wrap: break-word; // add to foundation?!
}

// 29. Keyboard focus
// ---------

a,
button,
input,
select,
textarea {
  @include a11y-focus;
}

// Main menu
.dropdown.menu > li > a {
  // Fix cut off shadows
  background-color: inherit;
}

.menu-main-expand .create-space-button,
.menu-main-expand .tabs-title a {
  [data-whatintent="keyboard"] &:active,
  [data-whatintent="keyboard"] &:focus {
    @include a11y-focus-inset;
  }
}

.space-card:focus-within {
  box-shadow: $global-focus;
}

// Tabs
.tabs-title:focus-within {
  @include a11y-focus-inset;
}

// Spaces editor
.spaces-editor-post-title,
.spaces-editor-container .ck-editor__editable,
.spaces-editor-dots-dropdown a {
  [data-whatintent="keyboard"] &:active,
  [data-whatintent="keyboard"] &:focus {
    @include a11y-focus-inset;
  }
}

[data-whatintent="keyboard"]
  .spaces-editor-dots-dropdown
  .card-divider:focus-within {
  @include a11y-focus-inset;
}

// Spaces editor: Community tags
.spaces-editor-terms .tagify.tagify--focus {
  [data-whatintent="keyboard"] & {
    border: 1px solid $global-focus-color;

    @include a11y-focus-inset;
  }
}

// Post cards
.card .post-card-anchor,
.card .edit-button + button,
.card .card-divider > a {
  [data-whatintent="keyboard"] &:active,
  [data-whatintent="keyboard"] &:focus {
    @include a11y-focus-inset;
  }
}

// Profile page: Edit Profile
.card .edit-profile {
  [data-whatintent="keyboard"] &:active,
  [data-whatintent="keyboard"] &:focus {
    @include a11y-focus-inset;
  }
}

.card .tagify.tagify--focus {
  [data-whatintent="keyboard"] & {
    border: 1px solid $global-focus-color;

    @include a11y-focus-inset;
  }
}

// Profile page: Masonary cards
[data-whatintent="keyboard"] .masonry-item:focus-within {
  box-shadow: $global-focus;
}

.masonry-item .card-anchor {
  box-shadow: none !important;
}

.masonry-item .card button {
  [data-whatintent="keyboard"] &:active,
  [data-whatintent="keyboard"] &:focus {
    box-shadow: inset $global-focus;
  }
}

// Meilensteine
.sms-single-toggle-size .caret-icon {
  [data-whatintent="keyboard"] &:active,
  [data-whatintent="keyboard"] &:focus {
    box-shadow: $global-focus;
  }
}

.sms-widget a {
  box-shadow: unset !important;
}

.sms-options:focus-within,
.sms-single-bottom-container:focus-within {
  box-shadow: $global-focus;
}

a.sms-single-option:focus {
  box-shadow: inset $global-focus;
}

// 30. Shadows

.no-box-shadow {
  box-shadow: none !important;
}

//   31. Containers
// ---------

.activity-container {
  background-color: $color-bg-1;
  border-radius: $card-border-radius;
}

// maybe rather give first-child more margin-top in this case to prevent jumping on load
.textwidget {
  .activity-container {
    margin-top: 1rem;
  }
}

// 32. Details
// ---------

details {
  > summary {
    display: inline-flex;
    position: relative;
    cursor: pointer;
    justify-content: center;
    align-items: center;
    width: 100%;
    gap: 1rem;

    &::marker {
      content: none;
    }

    // @extend .px-small;
    @extend .py-medium;

    &::after {
      content: "\f107";

      // position: absolute;
      font-family: "Font Awesome 6 Free";
      font-weight: bold;
      margin-left: auto;
      font-size: 0.85em;
      display: inline-block;
      transition: all var(--f-transition-medium) ease-out;
    }

    &.small {
      font-size: $small-font-size;
    }
  }

  &[open] {
    & > summary::after {
      transform: rotate(-180deg);
    }
  }

  & > :last-child {
    margin-bottom: 1em;
  }

  &:hover,
  &[open] {
    border-radius: 3px;

    summary {
      color: $color-text-0;
    }
  }

  body & {
    @extend .px-medium;
  }
}

.details::details-content {
  display: block;
  block-size: 0;
  overflow: hidden;
  transition-property: block-size, content-visibility;
  transition-duration: var(--f-transition-medium);
  transition-behavior: allow-discrete;
  transition-timing-function: ease-out;
}

.details[open]::details-content {
  block-size: auto;
  block-size: calc-size(auto, size);
}

// 33. Theming
// ---------

///
/// @todo
/// Refactor to match newly introduced data-theme attributes for forced light / dark modes.
///
/// Purpose:
/// - Provide a single, purpose-oriented mixin that assigns theme variables
///   for a given scope (page-wide vs. post) and mode (light vs. dark).
/// - Keep automatic detection via `prefers-color-scheme`.
/// - Allow manual overrides via `html[data-theme="light" | "dark"]`.
///

/* ==========================================================================
   Purpose-oriented mixin
   ========================================================================== */

/**
 * Assigns themed CSS custom properties.
 * @param {string} $scope: "page" (page-wide/space) or "post" (post-level).
 * @param {string} $mode:  "light" or "dark".
 */
@mixin themed-variables($scope, $mode) {
  @if $scope == page {
    ///
    /// This section covers page-wide theming, e.g. inside a space.
    ///
    @if $mode == light {
      --f-color-bg-0: color-mix(
        in oklab,
        var(--f-color-theme) 20%,
        var(--f-color-neutral-100) 80%
      );
      --f-color-bg-1: color-mix(
        in oklab,
        var(--f-color-theme) 9%,
        var(--f-color-neutral-100) 91%
      );
      --f-color-bg-2: color-mix(
        in oklab,
        var(--f-color-theme) 14%,
        var(--f-color-neutral-200) 86%
      );
      --f-color-text-0: color-mix(
        in oklab,
        var(--f-color-theme) 19%,
        var(--f-color-neutral-700) 81%
      );
      --f-color-text-1: color-mix(
        in oklab,
        var(--f-color-theme) 25%,
        var(--f-color-neutral-700) 75%
      );
      --f-color-text-2: color-mix(
        in oklab,
        var(--f-color-theme) 25%,
        var(--f-color-neutral-500) 75%
      );
      --f-color-brand: color-mix(
        in oklab,
        var(--f-color-theme) 75%,
        var(--f-color-neutral-700) 25%
      );
      --f-color-brand-contrast: #fff;
      --f-color-brand-darker: color-mix(
        in oklab,
        var(--f-color-brand) 88%,
        black 12%
      );
    } @else if $mode == dark {
      --f-color-bg-0: color-mix(
        in oklab,
        var(--f-color-theme) 11%,
        var(--f-color-neutral-100) 89%
      );
      --f-color-bg-1: color-mix(
        in oklab,
        var(--f-color-theme) 8%,
        var(--f-color-neutral-200) 92%
      );
      --f-color-bg-2: color-mix(
        in oklab,
        var(--f-color-theme) 10%,
        var(--f-color-neutral-300) 90%
      );
      --f-color-text-0: color-mix(
        in oklab,
        var(--f-color-theme) 12%,
        var(--f-color-neutral-700) 88%
      );
      --f-color-text-1: color-mix(
        in oklab,
        var(--f-color-theme) 25%,
        var(--f-color-neutral-700) 75%
      );
      --f-color-text-2: color-mix(
        in oklab,
        var(--f-color-theme) 25%,
        var(--f-color-neutral-500) 75%
      );
      --f-color-brand: color-mix(
        in oklab,
        var(--f-color-theme) 55%,
        var(--f-color-neutral-700) 45%
      );
      --f-color-brand-contrast: #000;
      --f-color-brand-darker: color-mix(
        in oklab,
        var(--f-color-brand) 88%,
        black 12%
      );
    }
  } @else if $scope == post {
    ///
    /// This section covers post theming, which can't be active in a themed space.
    ///
    @if $mode == light {
      --f-color-bg-0: color-mix(
        in oklab,
        var(--f-color-theme) 40%,
        var(--f-color-neutral-100) 60%
      );
      --f-color-bg-1: color-mix(
        in oklab,
        var(--f-color-theme) 15%,
        var(--f-color-neutral-200) 85%
      );
      --f-color-bg-2: color-mix(
        in oklab,
        var(--f-color-theme) 20%,
        var(--f-color-neutral-300) 80%
      );
      --f-color-text-0: color-mix(
        in oklab,
        var(--f-color-theme) 19%,
        var(--f-color-neutral-700) 81%
      );
      --f-color-text-1: color-mix(
        in oklab,
        var(--f-color-theme) 25%,
        var(--f-color-neutral-700) 75%
      );
      --f-color-text-2: color-mix(
        in oklab,
        var(--f-color-theme) 35%,
        var(--f-color-neutral-600) 65%
      );
      --f-color-brand: color-mix(
        in oklab,
        var(--f-color-theme) 55%,
        var(--f-color-neutral-700) 45%
      );
      --f-color-brand-contrast: #fff;
      --f-color-brand-darker: color-mix(
        in oklab,
        var(--f-color-brand) 88%,
        black 12%
      );
    } @else if $mode == dark {
      --f-color-bg-0: color-mix(
        in oklab,
        var(--f-color-theme) 15%,
        var(--f-color-neutral-100) 85%
      );
      --f-color-bg-1: color-mix(
        in oklab,
        var(--f-color-theme) 10%,
        var(--f-color-neutral-200) 90%
      );
      --f-color-bg-2: color-mix(
        in oklab,
        var(--f-color-theme) 15%,
        var(--f-color-neutral-300) 85%
      );
      --f-color-text-0: color-mix(
        in oklab,
        var(--f-color-theme) 19%,
        var(--f-color-neutral-700) 81%
      );
      --f-color-text-1: color-mix(
        in oklab,
        var(--f-color-theme) 25%,
        var(--f-color-neutral-700) 75%
      );
      --f-color-text-2: color-mix(
        in oklab,
        var(--f-color-theme) 35%,
        var(--f-color-neutral-600) 65%
      );
      --f-color-brand: color-mix(
        in oklab,
        var(--f-color-theme) 55%,
        var(--f-color-neutral-700) 45%
      );
      --f-color-brand-contrast: #000;
      --f-color-brand-darker: color-mix(
        in oklab,
        var(--f-color-brand) 88%,
        black 12%
      );
    }
  }
}

/* ==========================================================================
   Page-wide theming scope
   ========================================================================== */

html {
  &[themed][style*="--xmeans-color"] {
    ///
    /// This section covers page-wide theming, e.g. inside a space.
    ///
    --f-color-theme: var(--xmeans-color);

    // Default automatic behavior with prefers-color-scheme.
    @include themed-variables(page, light);

    @media (prefers-color-scheme: dark) {
      @include themed-variables(page, dark);
    }

    .post-content.user-generated a {
      text-decoration: underline;
    }

    body {
      background-image: radial-gradient(
        color-mix-blend(var(--xmeans-color), 50%, var(--f-color-bg-0), 90%),
        transparent 50vw
      );
      background-size: 100vw 100vw;
      background-position: center -70vw;
      background-repeat: no-repeat;
    }
  }

  &:not([themed]) {
    [themed][style*="--xmeans-color"] {
      ///
      /// This section covers post theming, which can't be active in a themed space.
      ///
      --f-color-theme: var(--xmeans-color);

      // Default automatic behavior with prefers-color-scheme.
      @include themed-variables(post, light);

      @media (prefers-color-scheme: dark) {
        @include themed-variables(post, dark);
      }

      .post-content.user-generated a {
        text-decoration: underline;
      }

      i.fa-droplet,
      i.fa-droplet::before,
      i.fa-circle-half-stroke,
      i.fa-circle-half-stroke::before {
        color: var(--f-color-theme);
      }
    }
  }
}

/* ==========================================================================
   Manual mode overrides – data-theme forces light/dark
   ========================================================================== */

/* Page-wide theming forced modes */
html[data-theme="light"][themed][style*="--xmeans-color"] {
  @include themed-variables(page, light);
}

html[data-theme="dark"][themed][style*="--xmeans-color"] {
  @include themed-variables(page, dark);
}

/* Post theming forced modes (when the page itself is not themed) */
html[data-theme="light"]:not([themed]) [themed][style*="--xmeans-color"] {
  @include themed-variables(post, light);
}

html[data-theme="dark"]:not([themed]) [themed][style*="--xmeans-color"] {
  @include themed-variables(post, dark);
}

:root {
  scrollbar-color: $color-text-2 $color-bg-0;
}

.info-chip-taxonomy {
  .value {
    display: none;
  }
}

// 99. Future
///
/// @todo
/// implement border-radii consistently across the platform. This is a first design iteration on how these structures could be constructed.
///
// .card.post {
// 	--_padding: .75rem;
// 	--_border-radius: 1.25rem;
//   padding: var(--_padding);
//   border-radius: var(--_border-radius) !important;
//   overflow: clip !important;

//   .avatar-container {
// 	.clipped {
// 		border-radius: calc(var(--_border-radius) - var(--_padding));
// 	}
//   }
//   .card-header {
// 	padding-inline-start: 1em;
//   }
// }
