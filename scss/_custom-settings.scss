//  Spaces Custom Settings for Foundation
//  -----------------------------
//
//  Table of Contents:
//
//   1. Mixins and Functions
//   2. Grid
//   3. Typography
//   4. Card
//   5. Spaces Card
//   6. User Card
//   7. Post Card
//   8. Clipping
//   9. Dropdown
//   10. Switch & Checkbox
//   11. Button & Input
//   12. Dot Menu
//   13. Excerpt
//   14. Menu
//   15. Icons
//   16. Tabs
//   17. Scroll Snapping
//   18. Calendar
//   19. Utilities
//   20. Orbit
//   21. Spinner
//   22. Typeahead
//   23. Accordion



// 1. Mixins and Functions
// ---------


@mixin foundation-palette($selector: '&', $child: '', $property: 'color') {

  @each $color-name,
  $color in $foundation-palette {
    #{$selector}.#{$color-name} #{$child} {
      #{$property}: $color;

      &:hover {
        #{$property}: scale-color($color, $lightness: -15%);
      }
    }
  }
}

@mixin button-sizes() {

  @each $size-name,
  $size in $button-sizes {
    &.#{$size-name} {
      font-size: $size;
    }
  }
}

@mixin cross-browser($property, $val) {
  -webkit-#{$property}: $val;
  -moz-#{$property}: $val;
  -ms-#{$property}: $val;
  #{$property}: $val;
}

@mixin header-style($header-size, $property: ('font-size', 'margin-bottom')) {

  @each $breakpoint,
  $header-style in $header-styles {
    @include breakpoint($breakpoint) {
      $size: rem-calc(map-deep-get($header-styles, $breakpoint, $header-size, font-size));

      @each $property,
      $value in $property {
        #{$property}: $size;
      }
    }
  }
}

@function strip-unit($number) {
  @if type-of($number)=='number'and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function gradient($color, $tilt: 0deg, $lightness: 20%) {
  @return linear-gradient($tilt, $color 0%, scale-color($color, $lightness) 100%);
}




// 2. Grid
// ---------

body {
  min-height: 100vh;
}

.grid-container {
  &.no-padding {
    padding: 0;
  }
}

.cell {
  position: relative;
}


// 3. Typography
// ---------

p  {
  font-size: $paragraph-font-size;

  &.small {
    font-size: $small-font-size;
  }

  &:last-child {
    margin-bottom: 0;
  }

  @include foundation-palette();
}

a {
  &:focus {
    outline: none;
  }

  @include foundation-palette();
  @include foundation-palette($selector: 'li', $child: '>&');

  @include button-sizes();
}

ul  {
  font-size: $paragraph-font-size;
  @include foundation-palette();
}
small {
  color: $dark-gray;
  display: inline-block;
  line-height: $header-lineheight;
}

code {
  border-radius: $global-radius-small;
}

input,
textarea,
select {
  font-size: $paragraph-font-size;
}
.button-group {
  select {
		margin: 0;
		border-radius: 0;
		&:first-child {
			border-top-left-radius: $global-radius;
			border-bottom-left-radius: $global-radius;
		}
		&:last-child {
			border-top-right-radius: $global-radius;
			border-bottom-right-radius: $global-radius;
		}
  }
  input {
    width: initial;
  }
}
small>label, label.small {
	font-size: $small-font-size;
}
label[for] {
	cursor: pointer;
}
.hover-underline {
  &:hover {
    text-decoration: underline;
  }
}

// 4. Card
// ---------

.card {
	flex-grow: 0;
  font-size: $paragraph-font-size;
	box-shadow: 0 0 0 nth($hr-border, 1) nth($hr-border, 3);
  transition: box-shadow $global-transition-medium $global-transition-timing;

  .card-anchor {
    color: inherit;
    text-decoration: none;
    display: flex;
    flex-direction: column;
    padding: 0 !important;
    @include foundation-palette();
	}
	&.overflow-auto {
		overflow: auto;
	}
	&.overflow-hidden {
		overflow: hidden;
	}
	&.overflow-initial {
		overflow: initial;
	}

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    display: flex;
    align-items: center;
  }

  &.muted {
    opacity: 0.5;
	}

	&:not(.static) {
		&:hover {
			cursor: pointer;
			box-shadow: $global-drop-shadow;
			transition: box-shadow $global-transition-short $global-transition-timing;
		}
  }
  input,
  textarea,
  select {
    font-size: $paragraph-font-size;
  }
}

.card-header {
  position: relative;
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
	align-items: flex-start;
	flex: 1;
	padding: $button-padding;
	line-height: $paragraph-lineheight;
	&.small {
		padding: 0;
		padding-left: nth($button-padding, 2);
	}
}

.card-title {
  display: flex;
  align-items: center;
  font-size: 1rem;
  line-height: $header-lineheight;

  &.small {
    font-size: 0.875rem;
  }

  .fa {
    font-size: 0.75em;
    margin-right: 0.5em;
  }
}

.card-section,
.card-divider {
	padding: $button-padding;
	flex-direction: column;
	&.flex-dir-row {
		flex-direction: row;
	}

  &>a {
		width: 100%;
    text-decoration: none;
		box-sizing: content-box;
		span {
			line-height: 1;
		}
		&:hover {
			background: $very-light-gray;
		}
	}

	&.no-padding {
		[type='text'], [type='password'], [type='date'], [type='datetime'], [type='datetime-local'], [type='month'], [type='week'], [type='email'], [type='number'], [type='search'], [type='tel'], [type='time'], [type='url'], [type='color'], textarea, select {
			border: none;
			resize: none;
		}
	}
}

.card-divider {
  border-top: $hr-border;

  &:first-child {
    border: none;
  }
}

.box-shadow {
  box-shadow: $global-drop-shadow;
}

// 5. Spaces Card
// ---------

.space-title {
  @extend .card-title;
  line-height: 1.5;
  position: absolute;
  display: flex;
  padding: 0 10px 0;
  z-index: 1;
  color: $body-font-color;
  background: $white;
  left: 0;
  top: 50%;
  transform: perspective(1px) translateY(-50%);
  max-width: 80%;
  border-radius: 0 2px 2px 0;
  align-items: center;

  span {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .fa {
    font-size: 0.75em;
    margin-right: 0.5em;
  }
}

.wide {
  width: 100%;
  max-width: 100%;
  padding: 0;

  .large {
    border-radius: 0;
    margin: 0;
  }

  @media (min-width: 1366px) {
    .space-title {
      left: calc(50vw - ((1080px - 20px) / 2));
      border-radius: $global-radius-small;
    }
  }
}

.large {
  .space-title {
    @include header-style('h2', 'font-size');
    white-space: normal;
    max-height: 3em;

    @include breakpoint(large) {
      white-space: nowrap;
      max-height: initial;
    }
  }
}


// 6. User Card
// ---------

$user-card-sizes: (
  small: 36px,
  medium: 54px,
  large: 96px,
  xlarge: 144px,
  xxlarge: 240px,
);
$user-card-default-size: map-get($user-card-sizes, medium);

.user {
	display: flex;
	align-items: center;
	height: $user-card-default-size;
	.checkbox-label {
		height: $user-card-default-size;
		width: $user-card-default-size;
	}
	@each $size-label, $size in $user-card-sizes {
		.#{$size-label} & {
			height: $size;
			.checkbox-label {
				height: $size;
				width: $size;
			}
		}
	}

	.profile .accordion-item.is-active & {
		.user-name {
			font-size: 1rem;
		}
	}
	.profile .accordion-item:not(.is-active) & {
		.user-name {
			font-size: 0.875rem;
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
			width: 100%;
			display: inline-block;
			&+.user-info {
				font-size: 0.75rem;
			}
		}
	}
	.avatar-container {
		position: relative;
		display: flex;
		align-items: center;
		justify-content: center;
		.clipped {
			z-index: 10;
		}
		.checkbox {
			position: absolute;
			[type='checkbox']+label {
				margin-left: 0;
				margin-right: 0;
			}
			&~.clipped {
				transition: $global-transition-medium;
			}
		}

	.spinner-container {
		position: absolute;
		display: none;
		align-items: center;
		justify-content: center;
		height: 100%;
		width: 100%;
		z-index: 10;
		background: $reveal-overlay-background;
	}
	}
	&:hover .avatar-container, &.is-active {
		.checkbox~.clipped {
			pointer-events: none;
			transform: scale(0.5);
			opacity: 0;
			transition: $global-transition-short;
		}
	}
}

.avatar-container {
	z-index: 20;

	width: $user-card-default-size;
	min-width: $user-card-default-size;

	@each $size-label, $size in $user-card-sizes {
		.#{$size-label} & {
			width: $size;
			min-width: $size;
		}
	}
}

.user-name {
  font-size: 0.875rem;
	margin: 0;
	display: inline-block;
  .fa {
    margin-left: 1em;
    color: $dark-gray;
  }

  .small & {
    height: 1rem;

    &:last-child {
      height: initial;
    }
  }

  .large & {
    font-size: 1rem;
  }

  .xlarge & {
    font-size: 1.5rem;
  }
  .xxlarge & {
    font-size: 1.5rem;
	}
}

.user-info {
  font-size: 0.75rem;
  color: $dark-gray;

  .small & {
    height: 1rem;
  }

  .large &, &.large {
    font-size: 0.875rem;
  }

  .xlarge &, .xxlarge & {
    font-size: 1rem;
  }
}

.avatar {
  flex: 0 0 auto;

  img {
    border-radius: $global-radius;
  }

  &.small {
    width: 36px;
    height: 36px;
  }

  &.large {
    width: 48px;
    height: 48px;
  }
}

.avatar-array {
  position: relative;
  width: 48px;
  display: flex;
  justify-content: center;
  align-items: center;

  .avatar-item {
    position: relative;
    flex: 1 1 auto;
    min-width: 28px;

    &+.avatar-item {
      margin-left: -25%;
    }

    @for $i from 1 through 5 {
      &:nth-child(#{$i}) {
        z-index: 5 - $i;
      }
    }

  }

  img {
    width: 28px;
    height: 28px;
    box-shadow: 0 0 0 1px $very-light-gray;
    margin: 0 auto;
    border-radius: 50%;
  }
}


// 6. Post Card
// ---------



// 8. Clipping
// ---------

.clipped {
  position: relative;
  display: flex;
  align-content: center;
  width: 100%;
  overflow: hidden;

  img,
  iframe {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;

    /* IE 9+ Hack for object-fit. Possibly good option as standard as well */
    @media screen and (min-width: 0\0) and (min-resolution: +72dpi) {
      height: auto;
      transform: translate(-50%, -50%);
    }
  }

  &.tint {
    &::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      pointer-events: none;
      background-color: rgba(0, 0, 0, 0.4);
      transition: background-color $global-transition-medium $global-transition-timing;
    }

    &>*:not(img, iframe) {
      color: $white;
      z-index: 1;
    }
  }

  a:hover &.tint,
  .is-active &.tint {
    &::after {
      background-color: rgba(0, 0, 0, 0.7);
      transition: background-color $global-transition-medium $global-transition-timing;
    }
  }

  &.square {
    padding-bottom: 100%;
    height: 0;
  }

  &.letterbox {
    padding-bottom: 56.25%;
    height: 0;
  }

  &.space-header {
    background: $very-light-gray;
    height: 64px;

    .large>&,
    .large>a>& {
      height: 200px;
      max-height: 25vw;
      min-height: 64px;
    }
  }

  &.feature-image {
    background: $white;
    height: 100px;

    .large & {
      height: 200px;
    }
  }

  &.variable {
    padding-bottom: 0;
    height: 100%;
    max-height: 200px;

    img {
      position: relative;
    }
  }

  @for $i from 1 through 8 {
    $number: $i * 50;

    &.height-#{$number} {
      height: 100%;
      padding-bottom: #{$number}px;
    }
  }
}

// 9. Dropdown
// -----------


.dropdown-pane {
  max-width: 100%;
  display: inline-block;
  box-shadow: $global-drop-shadow;
  background-color: $white;
  font-size: $small-font-size;
  &.is-open {
    z-index: 2000;
  }
}

.space-info-container {
	display: flex;
	align-items: center;
	flex-wrap: wrap;
  font-size: rem-calc($global-font-size * 0.875);

  &.small {
    font-size: rem-calc($global-font-size * 0.75);
  }

  &.large {
    font-size: rem-calc($global-font-size);
  }
}

.space-info-block {
  flex-wrap: wrap;
  display: flex;
  background: $very-light-gray;
  color: $very-dark-gray;
  margin: 3px;
  border-radius: $global-radius;
  overflow: hidden;
	line-height: $header-lineheight;
	&.clear {
		flex-direction: column;
		background: none;
		margin: 1em 0;
		&:first-child {
			margin-top: 0;
		}
		&:last-child {
			margin-bottom: 0;
		}
		& span, & a {
			color: $black;
			display: block;
			padding: 0;

			&:last-child {
				color: $dark-gray;
				background: none;
			}
		}
	}


  & span {
    display: inline-block;
    padding: 0.25em 0.375em 0.125em;

    &:last-child {
      background: $light-gray;
    }
  }

  & a {
    display: inline-block;
    padding: 0.25em 0.375em 0.125em;
    background: $light-gray;
    color: inherit;
  }
}
.user-space-info {
  line-height: $header-lineheight;
}


// 10. Switch & Checkbox
// ---------

.switch {
  display: flex;
	align-items: center;
	.icon-left & {
		margin-left: auto;
	}

  .switch-paddle {
    padding: 0;
    display: flex;
    align-items: center;
    border-radius: 0;
    height: 100%;
    background: none;
    &::before, &::after {
      content: '';
    }
    &::before {
      background: $medium-gray;
      height: 2px;
      width: 100%;
    }

    &::after {
      top: initial;
      left: 0;
      border-radius: 50%;
      box-shadow: inset 0 0 0 2px $medium-gray;
      box-sizing: content-box;
    }

    &:hover {
      &::after {
        background: $very-light-gray;
      }
    }
  }

  input:checked~.switch-paddle {
    color: get-color(primary);
    background: none;

    &::after {
      box-shadow: inset 0 0 0 1em currentColor;
    }

    &:hover {
      color: scale-color(get-color(primary), $lightness: -15%);
    }
  }

  @include foundation-palette($child: 'input:checked ~ .switch-paddle');
}

// Checkbox
.checkbox {
  display: flex;
  align-items: center;

  input {
    position: absolute;
    opacity: 0;
  }

  @include foundation-palette();

	font-size: $switch-height;
  &.tiny {
		font-size: $switch-height-tiny;
  }
  &.small {
		font-size: $switch-height-small;
  }
  &.large {
    font-size: $switch-height-large;
  }
  &.round {
    .checkbox-label {
      &::before {
        border-radius: 50%;
      }
    }
	}

  // Unchecked
  .checkbox-label {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    font-size: 1em;
		height: 1.125em;
		margin: 0;


    &::before, &::after {
      content: '';
      position: absolute;
    }
    &::before {
      box-shadow: inset 0 0 0 2px $medium-gray;
      border-radius: $global-radius-small;
      z-index: 1;
      transition: all $global-transition-medium;
      height: 1em;
      width: 1em;
    }

    &::after {
      width: 0.3em;
			height: 0.55em;
      border-bottom: 2px solid transparent;
			border-right: 2px solid transparent;
      transform: rotate(45deg);
      z-index: 2;
      transition: all $global-transition-medium;
		}
		&.tiny, &.small {
			.checkbox-label {
				&::before {
					box-shadow: inset 0 0 0 1px $medium-gray;
				}
				&::after {
					border-width: 1px;
				}
			}
		}
  }

  // Checked
  input:checked ~ .checkbox-label {
    &::before {
      box-shadow: inset 0 0 0 2em currentColor;
      transition: all $global-transition-medium;
    }

    &::after {
      margin-top: -0.05em;
      margin-left: 0.03em;
      transform: rotate(45deg);
      transition: all $global-transition-short;
      transition-delay: $global-transition-short;
      border-color: $white;
    }
  }
}

// Radio
.radio {
  display: flex;
  align-items: center;

  input {
    position: absolute;
    opacity: 0;
  }

  @include foundation-palette();

	font-size: $switch-height;
  &.tiny {
		font-size: $switch-height-tiny;
  }
  &.small {
		font-size: $switch-height-small;
  }
  &.large {
    font-size: $switch-height-large;
  }

  // Unchecked
  .radio-label {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    font-size: 1em;
    height: 1.125em;


    &::before {
			content: '';
			position: absolute;
      box-shadow: inset 0 0 0 2px $medium-gray;
      border-radius: $global-radius-small;
      transition: all $global-transition-medium;
      height: 1.125em;
      width: 1.125em;
      z-index: 1;
		}
  }

  // Checked
  input:checked ~ .radio-label {
    &::before {
      box-shadow: inset 0 0 0 calc(1em - 2px) currentColor;
      transition: all $global-transition-medium;
    }
  }
}

// 11. Button & Input
// ---------

$input-height: 2rem;

[type='text'], [type='password'], [type='date'], [type='datetime'], [type='datetime-local'], [type='month'], [type='week'], [type='email'], [type='number'], [type='search'], [type='tel'], [type='time'], [type='url'], [type='color'] {
	height: $input-height;
	padding: $label-padding;
	line-height: $form-label-line-height;
}
select {
	height: $input-height;
	padding: $label-padding;
	padding-right: 1.5rem;
	line-height: $form-label-line-height;
	&+button, &+.button {
		height: $input-height;
	}
	&:first-child {
		margin-top: 0;
	}
	&:last-child {
		margin-bottom: 0;
	}
}
.button {
	justify-content: center;

	.icons & {
		img, i, svg {
			font-size: 0.875em;
			width: 1.5em;
			display: flex;
			justify-content: center;
		}
		.icons.icon-left & {
			img, i, svg {
				margin-right: $menu-icon-spacing;
			}
		}
		.icons.icon-right & {
			img, i, svg {
				margin-left: $menu-icon-spacing;
			}
		}
	}
	&.hollow {
		@each $color-name, $color in $foundation-palette {
			&.#{$color-name} {
				box-shadow: inset 0 0 0 nth($hr-border, 1) $color;

				&:hover {
					box-shadow: inset 0 0 0 nth($hr-border, 1) scale-color($color, $lightness: -15%);
				}
			}
		};
	}
}
button,
.button,
input,
.input {

  &:focus,
  &:active {
    // background: $light-gray;
    outline: none;
  }

  &:last-child {
    margin-bottom: 0;
	}

	.card-section:first-child &, .card-divider:first-child & {
		border-bottom-left-radius: 0;
		border-bottom-right-radius: 0;
	}
	.card-section:last-child &, .card-divider:last-child & {
		border-top-left-radius: 0;
		border-top-right-radius: 0;
	}

}

.arrow-button {
  display: flex;
  align-items: center;
  font-size: $paragraph-font-size;
  @include foundation-palette();

  &::after {
    margin-left: auto;
    font-family: FontAwesome;
    content: '\f105';
  }
}

// 12. Dot Menu
// ---------

.dots {
  position: absolute;
  right: 0;
  bottom: 0;
  cursor: pointer;
	border-radius: 0;
	z-index: 100;

  &:hover::after {
    color: $black;
  }

  &::after {
    content: '...';
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    padding-bottom: 3px;
    width: 36px;
    height: 36px;
    line-height: 0;
    font-weight: $global-weight-bold;
    letter-spacing: 2px;
    white-space: nowrap;
    color: $dark-gray;
  }
}
.reply-button, .comment-count-button, .edit-button {
  position: absolute;
  width: 20px;
  height: 20px;
  top: 0;
  right: 0;
  padding: 10px 0px;
  box-sizing: content-box;
  a {
  &:hover {
    cursor: pointer;
    color: $black;
  }
  &:hover::after {
    color: $black;
  }
}
}
.reply-button {
  a {
  &::after {
    content: "\f112";
    font-family: 'FontAwesome';
    font-weight: $global-weight-normal;
    color: $dark-gray;
  }
}
}
.comment-count-button {
  font-size: 1.4rem;
  padding: 5px 10px 10px 5px;
  a {
  &::after {
    content: "\f075";
    font-family: 'FontAwesome';
    font-weight: $global-weight-normal;
    color: $dark-gray;
  }
}
.comment-number {
  line-height: 0;
  position: absolute;
  top: 21px;
  font-size: .65rem;
  font-weight: bold;
  width: 10px;
  text-align: center;
  letter-spacing: -0.05em;
  color: white;
}
}

.edit-button {
  a {
  &::after {
    content: "\f040";
    font-family: 'FontAwesome';
    font-weight: $global-weight-normal;
    color: $dark-gray;
  }
}
}
.edit-bar {
  position: absolute;
  display: flex;
  top: 0;
  right: 0;
  flex-direction: row-reverse;
  width: 50%;

  .dots {
    position: static;
  }
  .reply-button, .edit-button, .comment-count-button  {
    position: static;
  }

}

// 13. Excerpt
// ---------
@mixin excerpt($font-size: 1em, $line-height: 1.4, $lines-to-show: 3, $expand: false) {
  @if $expand==true {
    max-height: initial;
    /* Fallback for non-webkit */
    -webkit-line-clamp: initial;
    -webkit-box-orient: vertical;
    overflow: initial;
    text-overflow: initial;
  }

  @else {
    max-height: $font-size*$line-height*$lines-to-show;
    /* Fallback for non-webkit */
    -webkit-line-clamp: $lines-to-show;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  line-height: $line-height;
  display: block;
  /* Fallback for non-webkit */
  display: -webkit-box;
  font-size: $font-size;
}

.description-excerpt {
  @include excerpt($lines-to-show: 3);
}

.description-excerpt-checkbox {
  position: absolute;
  margin: 0;
  opacity: 0;

  &:checked~.description-excerpt {
    @include excerpt($expand: true);
  }

  &+label {
    vertical-align: initial;
    margin: initial;
  }
}


// 14. Menu
// ---------
$border: 1px solid $very-light-gray;

hr {
  margin: 0 auto;
  border-bottom: $hr-border;
}

.flex-spacer-left {
  margin-left: auto;
}

.main-menu {
  color: $very-dark-gray;
  background-color: $white;
  position: relative;
  z-index: 1000;

  .menu {
    font-size: 0.875rem;

    li {
      &.menu-main-expand {
        position: static;

        .menu {
          width: 100%;
        }
      }

      a:hover {
        background: $very-light-gray;
      }

      &.no-arrow {
        &>a {
          padding-right: $dropdownmenu-padding;

          &::after {
            display: none;
          }
        }
      }

      input[type=search] {
        border: none;
        box-shadow: none;
      }

      .menu-anchor {
        fill: currentColor;
      }
    }

    &>.navbar-icon {
      &>a {
        justify-content: center;
        min-width: 48px;

        &>svg {
          width: 0.875rem;
        }
      }
    }
  }
}

@include breakpoint(medium) {
  .main-menu .menu {
    &>.navbar-icon {
      &>a {
        &>span {
          display: initial;

          &+svg {
            display: none;
          }
        }
      }
    }

    @for $i from 1 through 5 {
      &>[data-order='#{$i}'] {
        order: $i;

        &>.is-dropdown-submenu {
          right: 0 !important;
          left: auto !important;
        }

        @if ($i==1) {
          margin-left: auto;
        }
      }
    }
  }
}

@include breakpoint(small down) {
  .main-menu .menu {
    justify-content: space-around;

    &>li {
      &.navbar-icon {
        justify-content: center;
        flex-grow: 1;
        flex-basis: 0;
        order: -1;

        &>a {
          &>span {
            display: none;
          }

          &::after {
            display: none;
          }
        }
      }

      &>.menu-anchor {
        height: 48px;
        box-sizing: border-box;
        align-items: center;
        display: flex;
        color: $dark-gray;
        fill: currentColor;
      }
    }

    &>.flex-spacer-left {
      margin-left: initial;
    }
  }
}

li[role=menuitem] {
  list-style: none;
}

@include breakpoint(small) {
  .main-menu .accordion-menu>li:not(.navbar-icon) {
    display: none;

    #menu-state:checked~& {
      display: block;
    }
  }
}

.caret {
  content: '\f107';
  font-family: FontAwesome;
  border: none;
}
.main-menu {
  .dropdown .is-dropdown-submenu,
  .accordion-menu .is-accordion-submenu {
    border-top: $hr-border;
    border-radius: 0 0 $global-radius $global-radius;
    overflow: hidden;
    box-shadow: $global-drop-shadow;
    z-index: -1; // enforce drop-shadow hierachie.

    a {
			border-right: none;
    }

    li {
      &:first-child .submenu-anchor {
        padding-top: 1rem;
      }

      &:last-child .submenu-anchor {
        padding-bottom: 1rem;
      }

      .card-anchor {
        padding: 0;
      }
    }
  }
}
.accordion-menu {
  .is-accordion-submenu-parent:not(.has-submenu-toggle) {
    &>a {
			&::after {
				@extend .caret;
				display: inline-block;
				width: 0.62em;
				margin-left: 0.5em;
			}
			span {
				width: 100%;
			}
    }
    &[aria-expanded='false']>a::after {
      transform: rotate(-90deg);
      transition: $global-transition-medium;
    }
    &[aria-expanded='true']>a::after {
      transform: rotate(-180deg);
      transition: $global-transition-medium;
    }
  }
  .button {
    text-align: left;
  }

  &>.navbar-icon {
    position: static;
    width: initial;

    .submenu {
      position: absolute;
      left: 0;
      background: $white;
    }
  }
}

.dropdown,
.accordion-menu {
  .menu-anchor {
    img {
      width: 36px;
      height: 36px;
    }
  }
}
.dropdown {
  &>li>a {
    display: flex;
    align-items: center;
    height: 48px;
    box-sizing: border-box;
  }

  &.menu {
    &>li {
      img.avatar {
        padding: 0;
			}
			&.no-padding>a {
				padding: 0 !important;
			}

      &>a {
        @include breakpoint(medium down) {
          padding: 0.5rem;
        }
      }

      &.is-dropdown-submenu-parent>a {
        &::after {
          @extend .caret;
          margin-right: 0.75rem;
          line-height: 0.5;
        }

        @include breakpoint(medium down) {
          padding-right: 1.25rem;
        }
      }
    }
  }
}

li {
	& label, & span, & a {
		.menu.icon-left &, .menu.icon-right & {
			width: 100%;
			display: flex;
			-ms-flex-flow: row nowrap;
			flex-flow: row nowrap;
			align-items: center;
		}
		img, i, svg {
			.icons & {
				font-size: 0.875em;
				width: 1.5em;
				display: flex;
				justify-content: center;
			}
			.menu.icon-left & {
				margin-right: $menu-icon-spacing;
			}
			.menu.icon-right & {
				margin-left: $menu-icon-spacing;
			}
		}
	}
}

// 15. Icons
// ---------

$icon-line-weight: 2;

#search-state {
  display: none;
}

.sandwich-icon,
.search-icon,
.flat-arrow-down-icon {
  cursor: pointer;
  border-radius: 20px;
  position: relative;
  width: 48px;
  height: 48px;
  padding: 12px;
  color: inherit;
  box-sizing: border-box;

  &::before,
  &::after {
    content: '';
    position: absolute;
    display: block;
    height: $icon-line-weight * 1px;
    box-shadow: inset 0 0 0 $icon-line-weight * 1px currentColor;
    transition-duration: $global-transition-medium;
    transition-timing-function: $global-transition-timing-cubic-bezier;
  }
}

.search-icon {

  &::before,
  &::after {
    transition-property: width, height, border-radius, transform;
  }

  &::before {
    height: 14px;
    width: 14px;
    border-radius: 20px;
    @include cross-browser(transform, translate(4px, 4px) rotate(0));

    #search-state:checked~nav & {
      height: 20px;
      width: $icon-line-weight * 1px;
      border-radius: 0;
      @include cross-browser(transform, translate((12 - $icon-line-weight / 2) * 1px, 2px) rotate(45deg));
    }
  }


  &::after {
    width: 6px;
    @include cross-browser(transform, translate(14px, (18 - $icon-line-weight) * 1px) rotate(45deg));

    #search-state:checked~nav & {
      width: 20px;
      @include cross-browser(transform, translate(2px, (12 - $icon-line-weight / 2) * 1px) rotate(45deg));
    }
  }

}

.search input {
  display: none;
  position: absolute;
  left: 0;
  z-index: 10;
  width: calc(100% - 150px);

  #search-state:checked~nav & {
    display: block;
  }
}

#menu-state {
  display: none;
}

.sandwich-icon {
  display: flex;
  align-items: center;
  justify-content: center;

  &::before,
  &::after {
    width: 20px;
    transition-property: transform;
  }

  &::before {
    @include cross-browser(transform, translate(0, -5px) rotate(0deg));

    #menu-state:checked~nav & {
      @include cross-browser(transform, translate(0, 0) rotate(-45deg));
    }
  }


  &::after {
    @include cross-browser(transform, translate(0, 5px) rotate(0deg));

    #menu-state:checked~nav & {
      @include cross-browser(transform, translate(0, 0) rotate(45deg));
    }
  }
}

.flat-arrow-down-icon {
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1;

  &::before,
  &::after {
    width: 20px;
    transition-property: transform;
  }

  &::before {
    @include cross-browser(transform, translate(-45%, 0) rotate(22.5deg));

    .is-active & {
      @include cross-browser(transform, translate(-45%, 0) rotate(-22.5deg));
    }
  }

  &::after {
    @include cross-browser(transform, translate(45%, 0) rotate(-22.5deg));

    .is-active & {
      @include cross-browser(transform, translate(45%, 0) rotate(22.5deg));
    }

  }
}

// 16. Tabs
// ---------

.tabs {
  display: flex;
  border: none;
  font-size: $paragraph-font-size;
  border-bottom: 1px solid rgba($dark-gray, .17);

  &:last-child {
    //border-bottom: none;
  }
  &::before, &::after {
    width: 0;
  }

  &.small {
    font-size: $small-font-size;
  }

  &.large {
    font-size: $global-font-size;
  }

  .tabs-title {
    text-align: center;
    float: initial;

    &>a {
      display: flex;
      align-items: center;
      justify-content: center;
      color: inherit;
      height: 40px;
    }
    &.is-active {
      &>a {
        background: $very-light-gray;
      }
    }
  }

  &.expanded {
    .tabs-title {
			width: 100%;
			a {
				padding: 0;
			}
    }
  }

  &.line {
    .tabs-title {
      &>a {
        &:hover {
          background: none;
          box-shadow: inset 0 -2px rgba($dark-gray, .17);
        }

        &:focus {
          background: none;
        }
        &[aria-selected='true'] {
          background: none;
          box-shadow: inset 0 -2px $dark-gray;
        }
      }

      &.is-active {
        &>a {
          background: none;
          box-shadow: inset 0 -2px $dark-gray;
        }
      }
    }
  }

  &.bar {
		&:last-child {
			border-bottom: none;
		}
    .tabs-title {
      border-right: $hr-border;

      &:last-child {
        border-right: none;
      }

      &>a {

        &:hover {
          background: $very-light-gray;
        }
        &:focus,
        &[aria-selected='true'] {
          background: $very-light-gray;
        }
      }
    }
  }

  &.image {
    .tabs-title {
      text-align: left;

      .title {
        position: absolute;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: flex-end;
        flex-direction: column;
        padding: $global-padding;
        font-weight: $global-weight-bold;
        line-height: $header-lineheight;
        z-index: 1;
        pointer-events: none;

        &>* {
          pointer-events: all;
        }

        &>span {
          margin-bottom: $header-margin-bottom;

          &:last-child {
            margin-bottom: initial;
          }
        }

        @include header-style('h3', 'font-size');
      }
    }
  }
}

.tabs-content {
  border: none;
}

// 17. Scroll Snapping
// ---------

.left-right-navigation {
  position: relative;

  &:hover {

    &::before,
    &::after {
      opacity: 1;
      transition: opacity $global-transition-medium;
    }
  }

  &::before,
  &::after {
    opacity: 0;
    transition: opacity $global-transition-medium;
    display: flex;
    position: absolute;
    top: 50%;
    @include cross-browser(transform, translateY(-50%));
    padding: $global-padding;
    background: $white;
    border-radius: $global-radius-small;
    box-shadow: $global-drop-shadow;
    font-family: FontAwesome;
    font-size: 1rem;
    font-weight: $global-weight-bold;
    z-index: 10;
  }

  &::before {
    content: '\f104';
    left: $global-gutter-small;

  }

  &::after {
    content: '\f105';
    right: $global-gutter-small;

  }

}


.scroll-snap-container-x {
  position: relative;
  display: flex;
  flex-wrap: nowrap;
  @include cross-browser(scroll-snap-type, x mandatory);
  overflow-x: auto;
  overflow-y: hidden;
  -webkit-overflow-scrolling: touch;
}

.scroll-snap-element {
  width: initial;
  max-width: 100%;
  box-sizing: border-box;
  margin: 0;

  &.start {
    @include cross-browser(scroll-snap-align, start);
  }

  &.center {
    @include cross-browser(scroll-snap-align, center);
  }

  &.end {
    @include cross-browser(scroll-snap-align, end);
  }

  &>span {
    position: relative;
    left: 0.5rem;

    &+* {
      margin-top: 0.5rem;
    }
  }

  @include breakpoint(small) {
    @include xy-cell($gutter-type: padding, $gutter-position: top right bottom left, $breakpoint: small);
    width: initial;
  }

  @include breakpoint(medium) {
    @include xy-cell($gutter-type: padding, $gutter-position: top right bottom left, $breakpoint: medium);
    width: initial;
  }

  @include breakpoint(large) {
    @include xy-cell($gutter-type: padding, $gutter-position: top right bottom left, $breakpoint: large);
    width: initial;
  }
}

/**
 * Todo Create a Fallback if global width is bigger than the biggest breakpoint defined in a cell.
 * $breakpoint-fallback is a start, not finished yet, though.
 * At the moment $global width should no exceed width of 'large' breakpoint.
 */
.scroll-snap-container-x {
  $widescreen-breakpoint: '';

  .grid-x {
    $breakpoint-fallback: ();

    // loop through each breakpoint-list-item.
    @each $breakpoint,
    $width in $breakpoints {
      $index: index(($breakpoints), ($breakpoint $width)) !global;

      @if $index==1 {
        $breakpoint-fallback: append($breakpoint-fallback, $breakpoint);
      }

      // set up media-query.
      @include breakpoint($breakpoint) {

        // loop through all possible column counts.
        @for $i from 1 through $grid-column-count {
          // set gutter width
          $grid-margin-gutter: map-get($grid-margin-gutters, #{$breakpoint});
          $grid-container-gutter: map-get($grid-container-padding, #{$breakpoint});

          // this is the cell, e.g. medium-8.
          &>.#{$breakpoint}-#{$i} {
            $container-width: 100vw;

            /**
             *  If breakpoint width is greater or equal to grid-container we set the
             *  reference width from 100vw to the grid-container.
             */
            @if (strip-unit(rem-calc(strip-unit($width))) >=strip-unit($grid-container)) {
              @if ($widescreen-breakpoint=='') {
                $widescreen-breakpoint: $breakpoint;
              }

              $container-width: $grid-container;
            }

            // This is where the magic happens.
            width: calc((#{$container-width} - #{$grid-container-gutter}) / (#{$grid-column-count} / #{$i}) - #{$grid-margin-gutter});
          }
        }
      }

      $breakpoint-fallback: append($breakpoint-fallback, $breakpoint);
    }
  }

  .grid-container:not(.no-padding) & {

    @each $breakpoint,
    $width in $breakpoints {
      @include breakpoint($breakpoint) {
        $container-width: 100vw;
        $gutter: map-get($grid-container-padding, #{$breakpoint});

        @if (strip-unit(rem-calc(strip-unit($width))) >=strip-unit($grid-container)) {
          $container-width: $grid-container;
        }

        width: calc(#{$container-width} - #{$gutter});
      }
    }
  }
}

// 17. Sections
// -----------

.section-title {
  @include header-style('h1');
  font-weight: $global-weight-bold;
  line-height: $header-lineheight;
}

.section-header {
  @include header-style('h2');
  font-weight: $global-weight-bold;
  line-height: $header-lineheight;
}

.section-wrap {
  margin: 2rem auto;
  width: 100%;
  max-width: $global-width;

  &.small {
    max-width: calc($global-width / 3 * 2);
  }

  @include breakpoint(medium) {
    width: $global-width;
  }
}



// 18. Calendar
// ---------

.calendar-icon {
  display: flex;
  flex-direction: column;
  height: 48px;
  width: 48px;
  flex: 0 0 auto;
  border-radius: 3px;
  overflow: hidden;
  border-radius: $global-radius;
  text-align: center;
  font-weight: $global-weight-bold;
  line-height: $global-lineheight;
  box-shadow: $global-drop-shadow;

  .month {
    display: flex;
    text-transform: uppercase;
    justify-content: center;
    color: $white;
    background: get-color(alert);
    background: gradient(get-color(alert), 30deg, 20%);
    font-size: 0.75rem;
    height: 38.2%;
  }

  .day {
    display: flex;

    justify-content: center;
    align-items: center;
    font-size: 1.25rem;
    color: $black;
    height: 61.8%;
  }
}


// 19. Utilities
// ---------

$padding-sizes: (small: 0.3125rem,
medium: 0.5rem 0.75rem,
large: 1rem 1.25rem,
xlarge: 1.25rem 2rem,
xxlarge: 1.25rem 2rem,
button: 0.625rem 0.75rem 0.5rem);

.no-padding {
  padding: 0;

  &>a {
    display: flex;
  }
}

@each $size-name,
$size in $padding-sizes {
  .padding-#{$size-name} {
    padding: $size;
    &>a,
    &>a:last-child {
			&, &>label {
				display: flex;
				padding: $size;

				@if length($size)>3 {
					margin: (nth($size, 1) * -1) (nth($size, 2) * -1) (nth($size, 3) * -1) (nth($size, 4) * -1);
				}

				@else if length($size)>2 {
					margin: (nth($size, 1) * -1) (nth($size, 2) * -1) (nth($size, 3) * -1);
				}

				@else if length($size)>1 {
					margin: (nth($size, 1) * -1) (nth($size, 2) * -1);
				}

				@else {
					margin: $size * -1;
				}
			}
			&+* {
				margin-top: nth($size, 1);
			}
		}
  }
}
.flex {
  display: flex;
}
.align-flex-start {
	justify-content: flex-start;
}
.align-flex-end {
	justify-content: flex-end;
}
.sticky {
	position: -webkit-sticky;
	position: sticky;
	z-index: 200;
	&.card-divider, &.card-section {
		background: $card-background;
	}
	&[data-sticky-top] {
		top: 0;
	}
	&[data-sticky-bottom] {
		bottom: 0;
	}
	&[data-sticky-top="padding"] {
		top: $global-padding;
	}
	&[data-sticky-bottom="padding"] {
		bottom: $global-padding;
	}
}

// 20. Orbit
// ---------

.orbit-controls {
	color: $light-gray;
}
.orbit-previous, .orbit-next {
	@include cross-browser(border-radius, 50px);
	color: $light-gray;
	display: flex;
	width: 36px;
	height: 36px;
	align-items: center;
	justify-content: center;
	cursor: pointer;
	font-size: 1.5rem;
	padding: 0;
}
.orbit-previous {
	left: 5px;
	&::after {
		content: '\f104';
		font-family: FontAwesome;
	}
}
.orbit-next {
	right: 5px;
	&::after {
		content: '\f105';
		font-family: FontAwesome;
	}
}
.orbit-bullets {
	button {
		cursor: pointer;
	}
}

.orbit-container {
	max-height: 60vh;
}

.orbit-slide {
	text-align: center;
}

.orbit-caption {
	position: absolute;
	background-color: $white;
	color: $very-dark-gray;
	opacity: .7;
}





// 21. Spinner
// ---------

$spinner-sizes: (
	tiny: $switch-height-tiny,
  small: $switch-height-small,
  medium: $switch-height,
  large: $switch-height-large,
);

.spinner {
  border: 2px solid #f0f0f0;
  border-radius: 50%;
  border-top: 2px solid get-color(primary);
  animation: spin 0.875s infinite cubic-bezier(.9,.3,.3,.7);
  width: 1.5rem;
	height: 1.5rem;

	@each $size-name,
  $size in $spinner-sizes {
    &.#{$size-name} {
      width: $size;
      height: $size;
    }
  }
  &.quick {
    animation-duration: .5s;
  }
  &.slow {
    animation-duration: 1.5s;
  }
}
@keyframes spin {
  0% {
  	transform: rotate(-20deg);
  }
  100% {
  	transform: rotate(340deg);
  }
}


// 22. Typeahead
// ---------


.tt-menu {
	width: 100%;
	background-color: #fff;
}
.tt-input {
	margin-bottom: 0;
}

.tt-suggestion.tt-cursor {
	background-color: get-color(primary);
	span, small {
		color: #fff;
	}
}


.add-user-typeahead {
	position: relative;
	width: 100%;
	input, .twitter-typeahead {
		width: 100%;
	}
	.tt-suggestion {
		padding: $button-padding;
		line-height: $header-lineheight;
		border-bottom: $hr-border;
		cursor: pointer;
		&:last-child {
			padding-bottom: 10px;
		}
		&.tt-cursor {
			background-color: get-color(success);
		}
	}
	.spinner-container {
		position: absolute;
		top: 0;
		right: nth($button-padding, 1);
		display: none;
		align-items: center;
		height: 100%;
	}
}

.shake {
	animation: shake 0.4s 1 linear;
}

@keyframes shake {
	8%, 41% { -webkit-transform: translateX(-0.25em); }
	25%, 58% { -webkit-transform: translateX(0.25em); }
	75% {	-webkit-transform: translateX(-0.1em); }
	92% { -webkit-transform: translateX(0.1em); }
	0%, 100% { -webkit-transform: translateX(0); }
}


// 23. Accordion
// ---------


.accordion {
	.accordion-item {
		.expand-button {
			position: absolute;
			top: 0;
			right: 0;
			width: $user-card-default-size / 1.5;
			height: $user-card-default-size;
			display: flex;
			opacity: 0;
			align-items: center;
			justify-content: center;
			z-index: 100;
			&::after {
				content: '\f107';
				font-family: FontAwesome;
				font-size: 1rem;
				font-weight: 900;
				color: $dark-gray;
				opacity: 0.5;
			}
			&:hover {
				&::after {
					opacity: 1;
				}
			}
		}
		.user {
			display: flex;
			flex-direction: column;
			align-items: flex-start;
			flex-wrap: wrap;
			color: inherit;
			position: relative;
			height: initial;
		}
		.avatar-container {
			width: $user-card-default-size;
			transition: $global-transition-medium;
		}
		&.is-active {
			.avatar-container {
				width: 100%;
			}
			.expand-button {
				&::after {
					content: '\f106';
					color: $white;
				}
			}
		}
		&:not(.is-active) {
			.accordion-content {
				display: none;
			}
			.user {
				flex-direction: row;
				align-items: center;
				.card-header {
					max-width: calc(100% - #{$user-card-default-size} * 1.5);
				}
			}
		}
	}
	.accordion-content {
		border: none;
	}
	&:hover {
		.expand-button {
			opacity: 1;
		}
	}
}
