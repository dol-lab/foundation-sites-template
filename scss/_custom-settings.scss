//  Spaces Custom Settings for Foundation
//  -----------------------------
//
//  Table of Contents:
//
//   1. Mixins and Functions
//   2. Grid
//   3. Typography
//   4. Card
//   5. Spaces Card
//   6. User Card
//   7. Clipping
//   8. Dropdown
//   9. Switch
//   10. Button
//   11. Dot Menu
//   12. Excerpt
//   13. Menu
//   14. Icons
//   15. Tabs
//   16. Scroll Snapping



// 1. Mixins and Functions
// ---------


@mixin foundation-palette($selector: '&', $child: '', $property: 'color') {

  @each $color-name,
  $color in $foundation-palette {
    #{$selector}.#{$color-name} #{$child} {
      #{$property}: $color;

      &:hover {
        #{$property}: scale-color($color, $lightness: -15%);
      }
    }
  }
}

@mixin button-sizes() {
  @each $size-name,
  $size in $button-sizes {
    &.#{$size-name} {
      font-size: $size;
    }
  }
}

@mixin cross-browser($property, $val) {
  -webkit-#{$property}: $val;
  -moz-#{$property}: $val;
  -ms-#{$property}: $val;
  #{$property}: $val;
}

@mixin header-style($header-size, $property: ('font-size', 'margin-bottom')) {

  @each $breakpoint,
  $header-style in $header-styles {
    @include breakpoint($breakpoint) {
      $size: rem-calc(map-deep-get($header-styles, $breakpoint, $header-size, font-size));

      @each $property,
      $value in $property {
        #{$property}: $size;
      }
    }
  }
}

@function strip-unit($number) {
  @if type-of($number)=='number'and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}


// 2. Grid
// ---------

.grid-container {
  &.no-padding {
    padding: 0;
  }
}

.cell {
  position: relative;
}

// 3. Typography
// ---------

p {
  font-size: $paragraph-font-size;

  &.small {
    font-size: $small-font-size;
  }
}

a {
  &:focus {
    outline: none;
  }

  @include foundation-palette();
  @include foundation-palette('li', '>&');
  @include button-sizes();
}

small {
  color: $dark-gray;
}

code {
  border-radius: $global-radius-small;
}

.input-reset {
  border: none;
  border-radius: 0;
  padding: 0.5rem 0.75rem;
  min-height: 2.5em;
  height: 2.5em;
  resize: none;
  font-size: 0.875rem;
}


// 4. Card
// ---------

.card {
  transition: box-shadow $global-transition-medium $global-transition-timing;

  .card-anchor {
    color: inherit;
    text-decoration: none;
    display: flex;
    flex-direction: column;
    padding: 0 !important;
    @include foundation-palette();
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    display: flex;
    align-items: center;
  }

  &.muted {
    opacity: 0.5;
  }

  &:not(.static):hover {
    cursor: pointer;
    box-shadow: $global-drop-shadow;
    transition: box-shadow $global-transition-short $global-transition-timing;
  }
}

.card-title {
  display: flex;
  align-items: center;
  font-size: 1rem;
  line-height: $header-lineheight;

  .fa {
    font-size: 0.75em;
    margin-right: 0.5em;
  }
}

.card-section,
.card-divider {
  padding: 8px 12px;

  &>a {
    width: 100%;
    text-decoration: none;

    &:hover {
      background: $very-light-gray;
    }
  }

  &.padding-small {
    padding: 5px;
  }

  &.padding-large {
    padding: 16px 20px;
  }

  &.padding-xlarge {
    padding: 20px 30px;
  }

  &.no-padding {
    padding: 0;

    &>a {
      padding: 8px 12px;

      &.padding-small>a {
        padding: 5px;
      }
    }
  }
}

.card-divider {
  border-top: $hr-border;

  &:first-child {
    border: none;
  }

  input,
  textarea {
    @extend .input-reset;
  }
}

.box-shadow {
  box-shadow: $global-drop-shadow;
}

// 5. Spaces Card
// ---------

.space-title {
  @extend .card-title;
  line-height: 1.5;
  position: absolute;
  display: flex;
  padding: 0 10px 0;
  z-index: 1;
  color: $body-font-color;
  background: $white;
  left: 0;
  top: 50%;
  transform: perspective(1px) translateY(-50%);
  max-width: 80%;
  border-radius: 0 2px 2px 0;
  align-items: center;

  span {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .fa {
    font-size: 0.75em;
    margin-right: 0.5em;
  }
}

.wide {
  width: 100%;
  max-width: 100%;
  padding: 0;

  .large {
    border-radius: 0;
    margin: 0;
  }

  @media (min-width: 1366px) {
    .space-title {
      left: calc(50vw - ((1080px - 20px) / 2));
      border-radius: $global-radius-small;
    }
  }
}

.large {
  .space-title {
    @include header-style('h2', 'font-size');
    white-space: normal;
    max-height: 3em;

    @include breakpoint(large) {
      white-space: nowrap;
      max-height: initial;
    }
  }
}


// 6. User Card
// ---------

.user {
  display: flex;
  align-items: center;
  height: 36px;

  .large & {
    height: 65px;
  }

  .xlarge & {
    height: 128px;
  }

  input,
  textarea {
    @extend .input-reset;
  }

  input[type='checkbox'] {
    margin: 0 1rem 0 0;
  }
}

.avatar-container {
  width: 36px;
  min-width: 36px;

  .large & {
    width: 65px;
    min-width: 65px;
  }

  .xlarge & {
    width: 128px;
    min-width: 128px;
  }
}

.user-meta {
  padding: 0 1rem;
  flex-grow: 1;
  line-height: 1;
  display: flex;
  justify-content: center;
  height: 100%;
}

.user-name {
  font-size: 0.875rem;
  height: 0.875rem;
  margin-bottom: 0.5rem;

  .fa {
    margin-left: 1em;
    color: #aaa;
  }

  .large & {
    font-size: 1rem;
    height: 1rem;
  }

  .xlarge & {
    font-size: 1.5rem;
    height: 1.5rem;
  }
}

.user-info {
  font-size: 0.75rem;
  height: 0.75rem;
  color: #aaa;

  .large & {
    font-size: 0.875rem;
    height: 0.875rem;
  }

  .xlarge & {
    font-size: 1rem;
    height: 1rem;
  }
}

.author-thumbnail {
  margin-right: 10px;

  &.small {
    min-width: 40px;
    min-height: 40px;
    width: 40px;
    height: 40px;
  }

  &.large {
    min-width: 60px;
    min-height: 60px;
    width: 60px;
    height: 60px;
  }
}

// 7. Clipping
// ---------

.clipped {
  position: relative;
  display: flex;
  align-content: center;
  width: 100%;
  overflow: hidden;

  img,
  iframe {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;

    /* IE 9+ Hack for object-fit. Possibly good option as standard as well */
    @media screen and (min-width: 0\0) and (min-resolution: +72dpi) {
      height: auto;
      transform: translate(-50%, -50%);
    }
  }

  &.tint {
    &::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      pointer-events: none;
      background-color: rgba(0, 0, 0, 0.4);
      transition: background-color $global-transition-medium $global-transition-timing;
    }

    &>*:not(img, iframe) {
      color: $white;
      z-index: 1;
    }
  }

  a:hover &.tint,
  .is-active &.tint {
    &::after {
      background-color: rgba(0, 0, 0, 0.7);
      transition: background-color $global-transition-medium $global-transition-timing;
    }
  }

  &.square {
    padding-bottom: 100%;
    height: 0;
  }

  &.letterbox {
    padding-bottom: 56.25%;
    height: 0;
  }

  &.space-header {
    background: $very-light-gray;
    height: 65px;

    .large>&,
    .large>a>& {
      height: 200px;
      max-height: 25vw;
      min-height: 65px;
    }
  }

  &.post-header {
    background: $white;
    height: 100px;
  }

  &.variable {
    padding-bottom: 0;
    height: 100%;
    max-height: 200px;

    img {
      position: relative;
    }
  }

  @for $i from 1 through 8 {
    $number: $i * 50;

    &.height-#{$number} {
      height: 100%;
      padding-bottom: #{$number}px;
    }
  }
}

// 8. Dropdown
// -----------


.dropdown-pane {
  max-width: 100%;
  display: inline-block;
  box-shadow: $global-drop-shadow;
  background-color: $white;
}

.space-info-container {
  font-size: rem-calc($global-font-size * 0.875);

  &.small {
    font-size: rem-calc($global-font-size * 0.75);
  }

  &.large {
    font-size: rem-calc($global-font-size);
  }
}

.space-info-block {
  flex-wrap: wrap;
  display: inline-flex;
  background: $very-light-gray;
  color: $dark-gray;
  margin: 3px;
  border-radius: $global-radius;
  overflow: hidden;
  line-height: $header-lineheight;

  & span {
    display: inline-block;
    padding: 0.25em 0.375em 0.125em;

    &:last-child {
      background: $light-gray;
      font-weight: $global-weight-bold;
    }
  }

  & a {
    display: inline-block;
    padding: 0.25em 0.375em 0.125em;
    background: $light-gray;
    color: inherit;
    font-weight: $global-weight-bold;
  }
}


// 9. Switch
// ---------



.switch {
  display: flex;
  align-items: center;

  .switch-paddle {
    padding: 0;
    display: flex;
    align-items: center;
    border-radius: 0;
    height: 100%;
    background: none;

    &::before {
      content: '';
      background: $medium-gray;
      height: 1px;
      width: 100%;
    }

    &::after {
      content: '';
      top: initial;
      left: 0;
      border-radius: 50%;
      box-shadow: inset 0 0 0 1px $medium-gray;
      box-sizing: content-box;
    }

    &:hover {
      &::after {
        background: $very-light-gray;
      }
    }
  }

  input:checked~.switch-paddle {
    color: get-color(primary);
    background: none;

    &::after {
      box-shadow: inset 0 0 0 1em currentColor;
    }

    &:hover {
      color: scale-color(get-color(primary), $lightness: -15%);
    }
  }

  @include foundation-palette($child: 'input:checked ~ .switch-paddle');
}

// 10. Button & Input
// ---------

button,
.button {

  &:focus,
  &:active {
    background: none;
    outline: none;
  }
}

input {

  &:focus,
  &:active {
    outline: none;
  }
}

.arrow-button {
  display: flex;
  align-items: center;
  font-size: $paragraph-font-size;
  @include foundation-palette();

  .fa {
    font-size: 1rem;
    margin-right: 0.5em;
  }

  &::after {
    margin-left: auto;
    font-family: FontAwesome;
    content: '\f105';
  }
}


// 11. Dot Menu
// ---------

.dots {
  position: absolute;
  right: 0;
  bottom: 0;
  cursor: pointer;
  border-radius: 0;

  &:hover::after {
    color: $black;
  }

  &::after {
    content: '...';
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    padding-bottom: 3px;
    width: 36px;
    height: 36px;
    line-height: 0;
    font-weight: $global-weight-bold;
    letter-spacing: 2px;
    white-space: nowrap;
    color: $dark-gray;
  }
}

.reply-button {
  position: absolute;
  width: 15px;
  height: 15px;
  top: 0;
  right: 0;
  padding: 10px;
  box-sizing: content-box;
  fill: $medium-gray;

  &:hover {
    cursor: pointer;
    fill: get-color('success');
  }
}


// 12. Excerpt
// ---------

@mixin excerpt($font-size: 1em, $line-height: 1.4, $lines-to-show: 3, $expand: false) {
  @if $expand==true {
    max-height: initial;
    /* Fallback for non-webkit */
    -webkit-line-clamp: initial;
    -webkit-box-orient: vertical;
    overflow: initial;
    text-overflow: initial;
  }

  @else {
    max-height: $font-size*$line-height*$lines-to-show;
    /* Fallback for non-webkit */
    -webkit-line-clamp: $lines-to-show;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  line-height: $line-height;
  display: block;
  /* Fallback for non-webkit */
  display: -webkit-box;
  font-size: $font-size;
}

.description-excerpt {
  @include excerpt($lines-to-show: 3);
}

.description-excerpt-checkbox {
  position: absolute;
  margin: 0;
  opacity: 0;

  &:checked~.description-excerpt {
    @include excerpt($expand: true);
  }

  &+label {
    vertical-align: initial;
    margin: initial;
  }
}


// 13. Menu
// ---------


$border: 1px solid $very-light-gray;

hr {
  margin: 0 auto;
  border-bottom: $hr-border;
}

.flex-spacer-left {
  margin-left: auto;
}

.main-menu {
  background-color: $white;
  position: relative;
  z-index: 1000;

  .menu {
    font-size: 0.875rem;

    li {
      &.menu-main-expand {
        position: static;

        .menu {
          width: 100%;
        }
      }
      a {
        color: $very-dark-gray;
      }
      a:hover {
        background: $very-light-gray;
      }

      &.no-arrow {
        &>a {
          padding-right: 0.875rem;

          &::after {
            display: none;
          }
        }
      }

      input[type=search] {
        border: none;
        box-shadow: none;
      }

      .menu-anchor {
        fill: currentColor;
      }
    }

    &>.navbar-icon {
      &>a {
        justify-content: center;
        min-width: 48px;

        &>svg {
          width: 0.875rem;
        }
      }
    }
  }
}

@include breakpoint(medium) {
  .main-menu .menu {
    &>.navbar-icon {
      &>a {
        &>span {
          display: initial;

          &+svg {
            display: none;
          }
        }
      }
    }

    @for $i from 1 through 5 {
      &>[data-order='#{$i}'] {
        order: $i;

        &>.is-dropdown-submenu {
          right: 0 !important;
          left: auto !important;
        }

        @if ($i==1) {
          margin-left: auto;
        }
      }
    }
  }
}

@include breakpoint(small down) {
  .main-menu .menu {
    justify-content: space-around;

    &>li {
      &.navbar-icon {
        justify-content: center;
        flex-grow: 1;
        flex-basis: 0;
        order: -1;

        &>a {
          &>span {
            display: none;
          }

          &::after {
            display: none;
          }
        }
      }

      &>.menu-anchor {
        height: 48px;
        box-sizing: border-box;
        align-items: center;
        display: flex;
        color: $dark-gray;
        fill: currentColor;
      }
    }

    &>.flex-spacer-left {
      margin-left: initial;
    }
  }
}

li[role=menuitem] {
  list-style: none;
}

@include breakpoint(small) {
  .main-menu .accordion-menu>li:not(.navbar-icon) {
    display: none;

    #menu-state:checked~& {
      display: block;
    }
  }
}

.caret {
  content: '\f107';
  font-family: FontAwesome;
  border: none;
}

.dropdown .is-dropdown-submenu,
.accordion-menu .is-accordion-submenu {
  border-top: $hr-border;
  border-radius: 0 0 $global-radius $global-radius;
  overflow: hidden;
  box-shadow: $global-drop-shadow;
  z-index: -1; // enforce drop-shadow hierachie.

  a {
    border-right: none;
  }

  li {
    &:first-child .submenu-anchor {
      padding-top: 1rem;
    }

    &:last-child .submenu-anchor {
      padding-bottom: 1rem;
    }

    .card-anchor {
      padding: 0;
    }
  }
}

.accordion-menu {
  .is-accordion-submenu-parent:not(.has-submenu-toggle)>a::after {
    @extend .caret;
    width: 0.62em;
    line-height: 0;
    margin-top: 0.1em;
  }

  &>.navbar-icon {
    position: static;
    width: initial;

    .submenu {
      position: absolute;
      left: 0;
      background: $white;
    }
  }
}

.dropdown,
.accordion-menu {
  &>.no-padding>a {
    padding: 0 !important;
  }

  &>.avatar {
    img {
      width: 48px;
      height: 48px;
    }
  }
}

.dropdown {
  &>li>a {
    display: flex;
    align-items: center;
    height: 48px;
  }

  &.menu {
    &>li {
      &>a {
        @include breakpoint(medium down) {
          padding: 0.5rem;
        }
      }

      &.is-dropdown-submenu-parent>a {
        &::after {
          @extend .caret;
          margin-right: 0.75rem;
          line-height: 0.5;
        }

        @include breakpoint(medium down) {
          padding-right: 1.25rem;
        }
      }
    }

  }
}



// 14. Icons
// ---------

$icon-line-weight: 2;

#search-state {
  display: none;
}

.sandwich-icon,
.search-icon {
  cursor: pointer;
  border-radius: 20px;
  position: relative;
  width: 48px;
  height: 48px;
  transition: $global-transition-medium;
  padding: 12px;
  box-sizing: border-box;
}

.search-icon {

  &::before,
  &::after {
    content: '';
    height: $icon-line-weight * 1px;
    position: absolute;
    display: block;
    box-shadow: inset 0 0 0 $icon-line-weight * 1px currentColor;
    transition: $global-transition-medium;
    transition-property: margin, width, height, transform, border-radius;
  }

  &::before {
    width: 14px;
    height: 14px;
    border-radius: 20px;
    @include cross-browser(transform, translate(4px, 4px) rotate(0));

    #search-state:checked~nav & {
      height: 20px;
      width: $icon-line-weight * 1px;
      border-radius: 0;
      @include cross-browser(transform, translate((12 - $icon-line-weight / 2) * 1px, 2px) rotate(45deg));
    }
  }


  &::after {
    width: 6px;
    transform: translate(13px, 15px) rotate(45deg);
    @include cross-browser(transform, translate(14px, (18 - $icon-line-weight) * 1px) rotate(45deg));

    #search-state:checked~nav & {
      width: 20px;
      @include cross-browser(transform, translate(2px, (12 - $icon-line-weight / 2) * 1px) rotate(45deg));
    }
  }

}

.search input {
  display: none;
  position: absolute;
  left: 0;
  z-index: 10;
  width: calc(100% - 150px);

  #search-state:checked~nav & {
    display: block;
  }
}

#menu-state {
  display: none;
}

.sandwich-icon {
  display: flex;
  align-items: center;
  justify-content: center;

  &::before,
  &::after {
    content: '';
    width: 20px;
    height: $icon-line-weight * 1px;
    position: absolute;
    display: block;
    box-shadow: inset 0 0 0 $icon-line-weight * 1px currentColor;
    transition: $global-transition-medium;
    transition-property: margin, width, height, transform, border-radius;
  }

  &::before {
    @include cross-browser(transform, translate(0, -5px) rotate(0deg));

    #menu-state:checked~nav & {
      @include cross-browser(transform, translate(0, 0) rotate(-45deg));
    }
  }


  &::after {
    @include cross-browser(transform, translate(0, 5px) rotate(0deg));

    #menu-state:checked~nav & {
      @include cross-browser(transform, translate(0, 0) rotate(45deg));
    }
  }
}

.flat-arrow-down-icon {
  cursor: pointer;
  position: relative;
  width: 48px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: inherit;
  z-index: 1;

  &::before,
  &::after {
    content: '';
    width: 20px;
    height: $icon-line-weight * 1px;
    position: absolute;
    display: block;
    box-shadow: inset 0 0 0 $icon-line-weight * 1px currentColor;
    transition: $global-transition-long $global-transition-timing-cubic-bezier;
    transition-property: margin, width, height, transform, border-radius;
  }

  &::before {
    @include cross-browser(transform, translate(-45%, 0) rotate(22.5deg));

    .is-active & {
      @include cross-browser(transform, translate(-45%, 0) rotate(-22.5deg));
    }
  }


  &::after {
    @include cross-browser(transform, translate(45%, 0) rotate(-22.5deg));

    .is-active & {
      @include cross-browser(transform, translate(45%, 0) rotate(22.5deg));
    }

  }
}

// 15. Tabs
// ---------

.tabs {
  display: flex;
  border: none;
  font-size: $paragraph-font-size;
  border-bottom: $hr-border;

  &.small {
    font-size: $small-font-size;
  }

  &.large {
    font-size: $global-font-size;
  }

  .tabs-title {
    text-align: center;
    float: initial;
    &>a {
      display: flex;
      align-items: center;
      justify-content: center;
      color: inherit;
      height: 40px;
      padding: $global-menu-padding;
    }
  }

  .tabs-content {
    border: none;
    color: inherit;
  }
  &.expanded {
    .tabs-title {
      width: 100%;
    }
  }
  &.line {

    .tabs-title {

      &>a {

        &:hover {
          background: none;
          box-shadow: inset 0 -2px $very-light-gray;
        }

        &:focus,
        &[aria-selected='true'] {
          background: none;
          box-shadow: inset 0 -2px $dark-gray;
        }
      }
    }
  }

  &.bar {
    // styles for type: bar.
  }

  &.image {
    .tabs-title {
      text-align: left;

      .title {
        position: absolute;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: flex-end;
        flex-direction: column;
        padding: $global-padding;
        font-weight: $global-weight-bold;
        line-height: $header-lineheight;
        z-index: 1;
        pointer-events: none;

        &>* {
          pointer-events: all;
        }

        &>span {
          margin-bottom: $header-margin-bottom;

          &:last-child {
            margin-bottom: initial;
          }
        }

        @include header-style('h3', 'font-size');
      }
    }
  }
}

// 16. Scroll Snapping
// ---------

.left-right-navigation {
  position: relative;

  &:hover {

    &::before,
    &::after {
      opacity: 1;
      transition: opacity $global-transition-medium;
    }
  }

  &::before,
  &::after {
    opacity: 0;
    transition: opacity $global-transition-medium;
    display: flex;
    position: absolute;
    top: 50%;
    @include cross-browser(transform, translateY(-50%));
    padding: $global-padding;
    background: $white;
    border-radius: $global-radius-small;
    box-shadow: $global-drop-shadow;
    font-family: FontAwesome;
    font-size: 1rem;
    font-weight: $global-weight-bold;
    z-index: 10;
  }

  &::before {
    content: '\f104';
    left: $global-gutter-small;

  }

  &::after {
    content: '\f105';
    right: $global-gutter-small;

  }

}


.scroll-snap-container-x {
  position: relative;
  display: flex;
  flex-wrap: nowrap;
  @include cross-browser(scroll-snap-type, x mandatory);
  overflow-x: auto;
  overflow-y: hidden;
}

.scroll-snap-element {
  width: initial;
  max-width: 100%;
  box-sizing: border-box;
  margin: 0;

  &.start {
    @include cross-browser(scroll-snap-align, start);
  }

  &.center {
    @include cross-browser(scroll-snap-align, center);
  }

  &.end {
    @include cross-browser(scroll-snap-align, end);
  }

  &>span {
    position: relative;
    left: 0.5rem;

    &+* {
      margin-top: 0.5rem;
    }
  }

  @include breakpoint(small) {
    @include xy-cell($gutter-type: padding, $gutter-position: top right bottom left, $breakpoint: small);
    width: initial;
  }

  @include breakpoint(medium) {
    @include xy-cell($gutter-type: padding, $gutter-position: top right bottom left, $breakpoint: medium);
    width: initial;
  }

  @include breakpoint(large) {
    @include xy-cell($gutter-type: padding, $gutter-position: top right bottom left, $breakpoint: large);
    width: initial;
  }
}

/**
 * Todo Create a Fallback if global width is bigger than the biggestbbreakpoint defined in a cell.
 * $breakpoint-fallback is a start, not finished yet, though.
 * At the moment $global width should no exceed width of 'large' breakpoint.
 */
.scroll-snap-container-x {
  $widescreen-breakpoint: '';

  .grid-margin-x {
    $breakpoint-fallback: ();

    // loop through each breakpoint-list-item.
    @each $breakpoint,
    $width in $breakpoints {
      $index: index(($breakpoints), ($breakpoint $width)) !global;

      @if $index==1 {
        $breakpoint-fallback: append($breakpoint-fallback, $breakpoint);
      }

      // set-up media-query.
      @include breakpoint($breakpoint) {

        // loop through all possible column counts.
        @for $i from 1 through $grid-column-count {
          // set gutter width
          $gutter: map-get($grid-margin-gutters, #{$breakpoint});

          &>.#{$breakpoint}-#{$i} {
            $container-width: 100vw;

            /*  
             *  If breakpoint width is greater or equal to global width we set the
             *  reference width from 100vw to the gloabl width.
             */
            @if (strip-unit(rem-calc(strip-unit($width))) >=strip-unit($global-width)) {
              @if ($widescreen-breakpoint=='') {
                $widescreen-breakpoint: $breakpoint;
              }

              $container-width: $global-width;
            }

            // This is where the magic happens.
            width: calc((#{$container-width} - #{$gutter}) / (#{$grid-column-count} / #{$i}) - #{$gutter});
          }
        }
      }

      $breakpoint-fallback: append($breakpoint-fallback, $breakpoint);
    }
  }

  .grid-container:not(.no-padding) & {

    @each $breakpoint,
    $width in $breakpoints {
      @include breakpoint($breakpoint) {
        $container-width: 100vw;
        $gutter: map-get($grid-margin-gutters, #{$breakpoint});

        @if (strip-unit(rem-calc(strip-unit($width))) >=strip-unit($global-width)) {
          $container-width: $global-width;
        }

        width: calc(#{$container-width} - #{$gutter});
      }
    }
  }
}

// 17. Sections
// -----------

.section-title {
  @include header-style('h1');
  font-weight: $global-weight-bold;
  line-height: $header-lineheight;
}

.section-header {
  @include header-style('h2');
  font-weight: $global-weight-bold;
  line-height: $header-lineheight;
}

.section-subheader {
  @include header-style('h3');
  line-height: $header-lineheight;
}

.section-wrap {
  margin: 2rem auto;
  width: 100%;
  max-width: $global-width;

  &.small {
    max-width: calc($global-width / 3 * 2);
  }

  @include breakpoint(medium) {
    width: $global-width;
  }
}