//  Spaces Custom Settings for Foundation
//  -----------------------------
//
//  Table of Contents:
//
//   1. Mixins and Functions
//   2. Grid
//   3. Typography
//   4. Card
//   5. Spaces Card
//   6. User Card
//   7. Post Card
//   8. Clipping
//   9. Dropdown
//   10. Switch & Checkbox
//   11. Button & Input
//   12. Dot Menu
//   13. Excerpt
//   14. Menu
//   15. Icons
//   16. Tabs
//   17. Scroll Snapping
//   18. Calendar
//   19. Utilities
//   20. Orbit
//   21. Spinner
//   22. Typeahead
//   23. Accordion
//   24. Paginate
//   25. Callout

// 1. Mixins and Functions
// ---------


$padding-sizes: (
	small: 0.3125rem,
	medium: 0.5rem 0.75rem,
	large: 1rem 1.25rem,
	xlarge: 1.5rem 2rem,
	xxlarge: 1.5rem 2rem,
	button: $button-padding
);

$user-card-sizes: (
	small: 36px,
	medium: 54px,
	large: 96px,
	xlarge: 144px,
	xxlarge: 240px
);
$user-card-default-size: map-get($user-card-sizes, medium);

@mixin foundation-palette(
	$selector: "&",
	$child: "",
	$property: "color",
	$hover: "true"
) {
	@each $color-name, $color in $foundation-palette {
		#{$selector}.#{$color-name} #{$child} {
			#{$property}: $color;
			@if $property== "background" {
				color: color-pick-contrast($color);
			}
			@if $hover== "true" {
				&:hover {
					#{$property}: scale-color($color, $lightness: -15%);
				}
			}
		}
	}
}

@mixin button-sizes() {
	@each $size-name, $size in $button-sizes {
		&.#{$size-name} {
			font-size: $size;
		}
	}
}
$dynamic-relation: (
	small: medium,
	medium: large,
	large: xlarge,
);
/// Computes an dynamic padding box.
///
/// @param {string} $edge
///   Padding or Margin.
/// @param {boolean} $negative
///   If negative or not.
/// @return {string} $axis
///   both, vertical or horizontal.
@mixin dynamic-box( $edge: padding, $negative: false, $axis: both ) {
	$multiplier: if($negative, -1, 1);
	@each $breakpoint, $edge-size in $dynamic-relation {
		@include breakpoint($breakpoint) {
			@if $axis == both {
				#{$edge}: multiply-list(map-get($padding-sizes, $edge-size), $multiplier);
			}
			@else if $axis == vertical {
				#{$edge}: multiply-list(extract-from-compact(map-get($padding-sizes, $edge-size), top), $multiplier) 0;
			}
			@else if $axis == horizontal {
				#{$edge}: 0 multiply-list(extract-from-compact(map-get($padding-sizes, $edge-size), left), $multiplier);
				@if $negative {
					max-width: calc(100% + (#{extract-from-compact(map-get($padding-sizes, $edge-size), left)} * 2));
					width: calc(100% + (#{extract-from-compact(map-get($padding-sizes, $edge-size), left)} * 2));
				}
			}
		}
	}
}

@mixin cross-browser($property, $val) {
	-webkit-#{$property}: $val;
	-moz-#{$property}: $val;
	-ms-#{$property}: $val;
	#{$property}: $val;
}

@mixin header-style($header-size, $property: ("font-size", "margin-bottom")) {
	@each $breakpoint, $header-style in $header-styles {
		@include breakpoint($breakpoint) {
			$size: rem-calc(
				map-deep-get($header-styles, $breakpoint, $header-size, font-size)
			);

			@each $property, $value in $property {
				#{$property}: $size;
			}
		}
	}
}

@function strip-unit($number) {
	@if type-of($number) == "number" and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}

@function gradient($color, $tilt: 0deg, $lightness: 20%) {
	@return linear-gradient(
		$tilt,
		$color 0%,
		scale-color($color, $lightness) 100%
	);
}
@function multiply-list($list, $multiplier) {
	$new-list: ();
	@each $item in $list {
		$new-list: join($new-list, ($item * $multiplier));
	}
	@return $new-list;
}
@function extract-from-compact( $value, $side ) {
	$index: 1;

	// Top values are always at index 1. The same for when the list has only one item
	@if ( $side == top or length( $value ) == 1 ) {
			$index: 1;
	}
	// Covers "vertical horizontal" style
	@else if ( length( $value ) == 2 ) {
			@if ( $side == left or $side == right ) { $index: 2; }
			@if ( $side == bottom ) { $index: 1; }
	}
	// Covers "top horizontal bottom" style
	@else if ( length( $value ) == 3 ) {
			@if ( $side == left or $side == right ) { $index: 2; }
			@if ( $side == bottom ) { $index: 3; }
	}
	// Covers "top right bottom left" style
	@else if ( length( $value ) == 4 ) {
			@if ( $side == right ) { $index: 2; }
			@if ( $side == bottom ) { $index: 3; }
			@if ( $side == left ) { $index: 4; }
	}

	@return nth( $value, $index );
}

// 2. Grid
// ---------

body {
	min-height: 100vh;
}
html {
	overflow-y: scroll;
}
.grid-container {
	&.space {
		@each $breakpoint, $width in $breakpoints {
			@include breakpoint( #{$breakpoint} only ) {
				margin-top: map-get(
					$grid-container-padding,
					#{$breakpoint}
				);
			}
		}
	}
	&.no-padding {
		padding: 0;
	}
}
.reverse-grid-container {
	margin-left: calc(-50vw + 50%);
	margin-right: calc(-50vw + 50%);
}
.cell {
	position: relative;
}

.sidebar {
	z-index: 30;
}

// 3. Typography
// ---------

p {
	font-size: $paragraph-font-size;

	&.small {
		font-size: $small-font-size;
	}

	&:last-child {
		margin-bottom: 0;
	}

	@include foundation-palette();
}

.stat {
	font-weight: $global-weight-bold;
	line-height: 1.2;
	text-transform: uppercase;
	@include breakpoint(medium down) {
		font-size: 2rem;
	}
}
.lead {
	font-size: 1.25em;
}
.highlight-word {
	&:before {
		content: '»';
	}
	&:after {
		content: '«';
	}
	margin-right: 1ch;
}

span {
	&.small {
		font-size: $small-font-size;
	}
}
.fa {
	@include foundation-palette($hover: false);
}

a {
	&:focus {
		outline: none;
	}

	@include foundation-palette();
	@include foundation-palette($selector: "li", $child: ">&");
	@include button-sizes();
}
.text-truncate {
	display: block;
	flex-shrink: 1;
}
.hover-underline:hover {
	text-decoration: underline;
}
ul {
	font-size: $paragraph-font-size;
	// @include foundation-palette();
}
small {
	color: $header-small-font-color;
	display: inline-block;
	line-height: $header-lineheight;
	& > a {
		&:hover {
			color: $black;
		}
	}
}

code {
	border-radius: $global-radius-small;
	font-size: 0.875em;
}
pre {
	tab-size: 2ch;
}
input,
textarea,
select {
	font-size: $paragraph-font-size;
	flex: 1;
}
small > label,
label.small {
	font-size: $small-font-size;
}
label[for] {
	cursor: pointer;
}
.hover-underline {
	&:hover {
		text-decoration: underline;
	}
}

// 4. Card
// ---------

.card {
	min-width: auto;
	flex-grow: 0;
	font-size: $paragraph-font-size;
	box-shadow: 0 0 0 nth($hr-border, 1) nth($hr-border, 3);
	transition: box-shadow $global-transition-medium $global-transition-timing;

	.card-anchor {
		color: inherit;
		text-decoration: none;
		display: flex;
		flex-direction: column;
		padding: 0 !important;
		@include foundation-palette();
	}
	&.overflow-auto {
		overflow: auto;
	}
	&.overflow-hidden {
		overflow: hidden;
	}
	&.overflow-initial {
		overflow: initial;
	}

	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		display: flex;
		align-items: center;
	}

	&.muted {
		opacity: 0.5;
	}

	&:not(.static) {
		&:hover {
			cursor: pointer;
			box-shadow: $global-drop-shadow;
			transition: box-shadow $global-transition-short $global-transition-timing;
		}
	}
	input,
	textarea,
	select {
		font-size: $paragraph-font-size;
	}
	&.accordion {
		background: $card-background;
	}
}

.card-header {
	position: relative;
	width: 100%;
	min-width: 0; // necessary to override flex-box default (e.g. members hover in default space).
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: flex-start;
	flex: 1;
	padding: $button-padding;
	// padding-bottom: 0.25rem;
	line-height: $paragraph-lineheight;

	h1 {
		margin-bottom: 0;
	}
	&.flex-dir-row {
		flex-direction: row;
		justify-content: flex-start;
		align-items: center;
	}
	&.no-padding {
		padding: 0;
		padding-left: nth($button-padding, 2);
	}
	// @each $size-label, $size in $user-card-sizes {
	// 	.#{$size-label} & {
	// 		width: calc(100% - #{$size});
	// 		padding-left: nth($button-padding, 2);
	// 	}
	// }
}
.post-card-anchor {
	width: 100%;
}
.card-title {
	display: flex;
	align-items: center;
	font-size: 1rem;
	// padding-bottom: 0.3rem;
	line-height: $header-lineheight;
	font-weight: $global-weight-normal;
	margin: 0;

	&.small {
		font-size: 0.875rem;
	}

	.fa {
		font-size: 0.75em;
		margin-right: 0.5em;
	}
}

.card-section,
.card-divider {
	padding: $button-padding;
	&-negative {
		margin-left: -#{nth($button-padding, 2)};
		margin-right:-#{nth($button-padding, 2)};
	}
	display: flex;
	flex-direction: column;
	&.flex-dir-row {
		flex-direction: row;
	}
	&.flex-dir-column {
		flex-direction: column;
	}
	&.small {
		line-height: 1.25rem;
	}
	& > a {
		width: 100%;
		text-decoration: none;
		box-sizing: content-box;
		span {
			line-height: 1;
		}
		&:hover {
			background: $very-light-gray;
		}
	}
	&.no-padding {
		[type="text"],
		[type="password"],
		[type="date"],
		[type="datetime"],
		[type="datetime-local"],
		[type="month"],
		[type="week"],
		[type="email"],
		[type="number"],
		[type="search"],
		[type="tel"],
		[type="time"],
		[type="url"],
		[type="color"],
		textarea,
		select,
		.input {
			border: none;
			resize: none;
		}
		& > a {
			box-sizing: border-box;
		}
	}

	@each $size-label, $size in $user-card-sizes {
		&.#{$size-label} {
			&:last-child {
				height: $size;
			}
		}
	}
	&:last-child {
		//margin-top: auto;
	}
}

.card-divider {
	border-top: $hr-border;
	&.accordion-content {
		border-top: $hr-border !important;
	}
	&:first-child {
		border: none;
	}
}

.box-shadow {
	box-shadow: $global-drop-shadow;
}

.page-title {
	@extend .card-title;
	font-size: 1.25rem;
	padding-top: 0.5rem;
}
.page-content {
	padding: 1rem 0;
}
.card-divider,
.card-section {
	&.nested {
		// @todo: make padding and margin dynamic.
		border-top: none;
		margin-top: -1rem;
		.card-section.no-padding.flex-dir-row {
			border-top: $hr-border;
			margin-top: -1.375rem;
			padding-top: 0.75rem;
			.page-title {
				font-size: 1rem;
			}
		}
	}
}

// 5. Spaces Card
// ---------

.space-title {
	@extend .card-title;
	line-height: 1;
	position: absolute;
	display: flex;
	padding: 0.375rem 0.75rem;
	z-index: 1;
	color: $body-font-color;
	background: rgba($white, 0.75);
	-webkit-backdrop-filter: (20px) saturate(200%);
	backdrop-filter: blur(20px) saturate(200%);
	left: 0;
	top: 70%;
	transform: perspective(1px) translateY(-50%);
	max-width: 80% !important; // .text-truncate will otherwise override with 100%
	border-radius: 0 2px 2px 0;
	align-items: center;

	// span {
	//   white-space: nowrap;
	//   overflow: hidden;
	//   text-overflow: ellipsis;
	// }

	.fa {
		font-size: 0.75em;
		margin-right: 0.5em;
	}

	.large & {
		@include header-style("h2", "font-size");
		white-space: normal;
		max-height: 3em;

		@include breakpoint(large) {
			white-space: nowrap;
			max-height: initial;
		}
	}
}

.wide {
	width: 100%;
	max-width: 100%;
	padding: 0;

	.large {
		border-radius: 0;
		margin: 0;
	}

	@media (min-width: 1366px) {
		.space-title {
			left: calc(50vw - ((1080px - 20px) / 2));
			border-radius: $global-radius-small;
		}
	}
}

// 6. User Card
// ---------

.card-user {

	.user-card-header {
		position: relative;
		display: flex;
		align-items: flex-start;
		flex-wrap: wrap;
	}
	.card-header {
		min-height: $user-card-default-size;
	}
	.checkbox-label {
		height: $user-card-default-size;
		width: $user-card-default-size;
	}
	@each $size-label, $size in $user-card-sizes {
		.#{$size-label} &,
		&.#{$size-label} {
			.card-header {
				min-height: $size;
			}
			.checkbox-label {
				height: $size;
				width: $size;
			}
		}
	}

	/* .profile { */
		.accordion-item & {
			display: flex;
			flex-direction: column;
			align-items: flex-start;
			flex-wrap: wrap;
			color: inherit;
			position: relative;
			height: initial;
			@include breakpoint(medium only) {
				flex-direction: row;
			}
		}
		.accordion-item.is-active {
			.user-name {
				font-size: 1rem;
			}
			.avatar-container {
				width: 100%;
				@include breakpoint(medium only) {
					width: map-get($user-card-sizes, large);
				}
				transition: $global-transition-medium;
			}
			.card-header {
				transition: $global-transition-medium;
				@include breakpoint(medium only) {
					min-height: map-get($user-card-sizes, large);
					height: map-get($user-card-sizes, large);
					padding-left: 1rem;
				}
			}
			.expand-button {
				&::after {
					content: "\f106";
					color: $white;
				}
			}
		}
		.accordion-item:not(.is-active) & {
			flex-direction: row;
			align-items: center;
			.card-header {
				max-width: calc(100% - #{$user-card-default-size} * 1.5);
			}
			.user-name {
				font-size: 0.875rem;
				white-space: nowrap;
				overflow: hidden;
				text-overflow: ellipsis;
				width: 100%;
				display: inline-block;
				& + .user-info {
					display: block;
					font-size: 0.75rem;
				}
			}
			.accordion-content {
				display: none;
			}
		}
/* 	} */

	.avatar-container {
		position: relative;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: $global-transition-medium;
		.clipped {
			z-index: 10;
		}
		.checkbox {
			position: absolute;
			[type="checkbox"] + label {
				display: flex;
				margin-left: 0;
				margin-right: 0;
			}
			& ~ .clipped {
				transition: $global-transition-medium;
			}
		}
		.spinner-container {
			position: absolute;
			display: none;
			align-items: center;
			justify-content: center;
			height: 100%;
			width: 100%;
			z-index: 10;
			background: $reveal-overlay-background;
		}
		.profile .accordion-item & {
			width: $user-card-default-size;
			transition: $global-transition-medium;
		}
	}
	&:hover .avatar-container,
	&.is-selected {
		.checkbox ~ .clipped {
			pointer-events: none;
			transform: scale(0.5);
			opacity: 0;
			transition: $global-transition-short;
		}
	}
}

.profile .accordion-item {
	&.is-active {
		@include breakpoint(medium only) {
			.margin-top-1[data-visible-on="display"] {
				margin-top: 0 !important;
			}
		}
	}
	.user-email {
		margin-top: 0 !important;
	}
}
.avatar-container {
	z-index: 20;
	width: $user-card-default-size;
	min-width: $user-card-default-size;
	@each $user-card-size, $size in $user-card-sizes {
		&.#{$user-card-size} {
			width: $size;
			min-width: $size;
		}
	}

	img[data-toggle] {
		cursor: pointer;
		transition: $global-transition-short;
	}
	img[data-move] {
		cursor: move;
		transition: $global-transition-short;
	}
	&:hover img[data-toggle],
	&:hover img[data-move],
	[aria-expanded="true"] {
		border-radius: $global-radius;
		transform: scale(0.8);
	}

	@each $size-label, $size in $user-card-sizes {
		.#{$size-label} & {
			width: $size;
			min-width: $size;
		}
	}
}

.user-name {
	font-size: 0.875rem;
	margin: 0;
	display: inline-block;
	.fa {
		margin-left: 1em;
		color: $dark-gray;
	}

	.small & {
		height: 1.125rem;

		&:last-child {
			height: initial;
		}
	}

	.large & {
		font-size: 1rem;
	}

	.xlarge & {
		font-size: 1.5rem;
	}
	.xxlarge & {
		font-size: 1.5rem;
	}
}

.user-name.text-truncate {
	/* truncate needs display block, so vertical flex center no longer works. */
	// transform: translateY(50%);
}

.user-info {
	font-size: 0.75rem;
	color: $dark-gray;

	.small & {
		height: 1.125rem;
	}

	.large &,
	&.large {
		font-size: 0.875rem;
	}

	.xlarge &,
	.xxlarge & {
		font-size: 1rem;
	}
}

.avatar {
	flex: 0 0 auto;
	width: $user-card-default-size;
	//height: $user-card-default-size;
	img {
		border-radius: $global-radius;
	}
	@each $user-card-size, $size in $user-card-sizes {
		&.#{$user-card-size}, .avatar.#{$user-card-size} & {
			width: $size;
			height: $size;
		}
	}
}

.avatar-array {
	position: relative;
	width: 48px;
	display: flex;
	justify-content: center;
	align-items: center;

	.avatar-item {
		position: relative;
		flex: 1 1 auto;
		min-width: 28px;

		& + .avatar-item {
			margin-left: -25%;
		}

		@for $i from 1 through 5 {
			&:nth-child(#{$i}) {
				z-index: 5 - $i;
			}
		}
	}

	img {
		width: 28px;
		height: 28px;
		box-shadow: 0 0 0 1px $very-light-gray;
		margin: 0 auto;
		border-radius: 50%;
	}
}

// 6. Post Card
// ---------

.post-card, .page-section, .report-card {
	h1, h2, h3, h4, h5, h6 {
		font-weight: normal;
	}
}
.post-card {
	h1 {
		font-size: 1.125rem;
	}
	h2 {
		font-size: 1.0625rem;
	}
	h3 {
		font-size: 1rem;
	}
	h4 {
		font-size: 0.875rem;
		color: $dark-gray;
	}
	h5 {
		font-size: 0.875rem;
		font-style: italic;
		color: $dark-gray;
	}
	h6 {
		font-size: 0.75rem;
		font-style: italic;
		color: $dark-gray;
	}
}
.page-section, .report-card {
	h1 {
		font-size: 1.5rem;
	}
	h2 {
		font-size: 1.25rem;
	}
	h3 {
		font-size: 1.125rem;
	}
	h4 {
		font-size: 1rem;
		color: $dark-gray;
	}
	h5 {
		font-size: 0.875rem;
		color: $dark-gray;
	}
	h6 {
		font-size: 0.875rem;
		font-style: italic;
		color: $dark-gray;
	}
}
.post-card,
.activity-card {
	a:first-child .post-feature-image,
	.post-feature-image:first-child,
	.space-header:first-child {
		overflow: hidden;
		border-radius: $card-border-radius $card-border-radius 0 0;
	}
	& > .user:first-child .avatar-container {
		overflow: hidden;
		border-radius: $card-border-radius 0 0 0;
	}
	.card-divider:last-child .post-images {
		flex-wrap: wrap;
		height: map-get($user-card-sizes, small);
		.avatar-container:first-child {
			overflow: hidden;
			border-radius: 0 0 0 $card-border-radius;
		}
	}
	.user:not(:first-child) {
		border-top: $hr-border;
	}
	.dropdown-pane  {
		width: 150px;
	}
}
.main-menu {
	.notifications-item {
		min-width: 300px;
		a.card-section {
			z-index: 100;
			width: 100%;
		}
	}
}
.notifications-item {
	flex: 1;
}
.notification-message {
	line-height: 1.4;
}
.notification-author, .notification-post, .notification-space {
	display: initial !important;
	padding: initial !important;
}
.notification-post {
	color: $black;
}
.dot-after {
	&:after {
		content: "\00b7";
		margin: 0 0.5em;
	}
}
.additional-comments {
	height: 100%;
	display: flex;
	align-items: center;
	justify-content: center;
	background: $very-light-gray;
	color: $dark-gray;
	font-weight: $global-weight-bold;
	font-size: $small-font-size;
}
.post-tags {
	display: flex;
	flex-wrap: wrap;
	font-size: $small-font-size;
	margin: -0.25rem;
	a {
		padding: 0.25rem;
		width: initial;
	}
}
.comment-reply-content {
	width: 100%;
	align-items: flex-end;
	flex-wrap: nowrap;
	justify-content: flex-end;
	textarea {
		&.comment-reply-text {
			min-height: initial;
			height: initial;
			&, &:focus, &:active {
				border: none;
			}
		}
	}
	.comment-reply-submit {
		position: absolute;
	}
}
.report-card .report-header,
.page-section .page-header {
	@include dynamic-box();
}
.post-card .post-content,
.report-card .report-content,
.page-section .page-content {
	@include dynamic-box();
	align-items: flex-start;
	overflow-wrap: break-word; /* break long links in post-content. */

	.alignfull {
		@include dynamic-box($edge: margin, $negative: true, $axis: horizontal);
		@each $breakpoint, $width in $breakpoints {
			@include breakpoint($breakpoint) {
				margin-top: 1rem;
				margin-bottom: 1rem;
			}
		}
		img {
			@include xy-gutters($gutters: $grid-container-padding, $negative: true);
			@each $breakpoint, $width in $breakpoints {
				@include breakpoint($breakpoint) {
					$grid-margin-gutter: map-get($grid-container-padding, #{$breakpoint});
					max-width: calc(100% + #{$grid-margin-gutter});
					width: calc(100% + #{$grid-margin-gutter});
				}
			}
			box-shadow: $global-drop-shadow;
		}
	}
	.alignwide {
		@include dynamic-box($edge: margin, $negative: true, $axis: horizontal);
		@each $breakpoint, $width in $breakpoints {
			@include breakpoint($breakpoint) {
				margin-top: 1rem;
				margin-bottom: 1rem;
			}
		}
	}
	a {
		&:hover {
			text-decoration: underline;
		}
	}
}

// 8. Clipping
// ---------

.clipped {
	position: relative;
	display: flex;
	align-content: center;
	width: 100%;
	overflow: hidden;

	img {
		// this shows the upper third of the image. think about images with people where you don't want to crop heads...
		object-position: 50% 33%;
	}

	img,
	iframe {
		position: absolute;
		width: 100%;
		height: 100%;
		object-fit: cover;
		background: $very-light-gray;

		/* IE 9+ Hack for object-fit. Possibly good option as standard as well */
		@media screen and (min-width: 0\0) and (min-resolution: +72dpi) {
			height: auto;
			transform: translate(-50%, -50%);
		}
	}

	&.tint {
		color: $white;
		background-color: $black;
		&::after {
			content: '';
			position: absolute;
			z-index: 1;
			width: 100%;
			height: 100%;
			pointer-events: none;
			background-color: $black;
			opacity: 0.375;
			transition: opacity $global-transition-medium
				$global-transition-timing;
		}
		& > *:not(img) {
			z-index: 10;
		}
		img, iframe {
			z-index: 0;
		}
		&.tint-negativ {
			color: $black;
			background-color: $white;
			&::after {
				background-color: $white;
			}
		}
	}

	a:hover &.tint,
	.is-active &.tint {
		&::after {
			opacity: 0.625;
			transition: opacity $global-transition-medium
				$global-transition-timing;
		}
	}

	&.square {
		padding-bottom: 100%;
		height: 0;
	}

	&.letterbox {
		padding-bottom: 56.25%;
		height: 0;
	}

	&.space-header {
		background: $very-light-gray;
		// height: 64px;
		height: 80px;

		.large > &,
		.large > a > & {
			height: 200px;
			max-height: 25vw;
			min-height: 64px;
		}
		.activity-card > & {
			height: 36px;
    }
	}
	&.line {
		background: $very-light-gray;
		height: 10px;
		&::after {
			content: "";
			position: absolute;
			width: 100%;
			height: 100%;
			pointer-events: none;
			-webkit-backdrop-filter: blur(50px) saturate(200%);
			backdrop-filter: blur(20px);
			transition: background-color $global-transition-medium
				$global-transition-timing;
		}
	}

	&.feature-image {
		background: $white;
		height: 100px;

		&.large {
			height: 200px;
		}
	}

	&.variable {
		padding-bottom: 0;
		height: 100%;
		max-height: 200px;

		img {
			position: relative;
		}
	}
	&.full {
		padding-bottom: 100vh;
	}
	.add-new {
		display: flex;
		align-items: center;
		justify-content: center;
		height: 80px;
		width: 100%;
		background: $very-light-gray;
		color: $dark-gray;
		font-size: 1.25rem;
		&:after {
			content: '\f055';
			font-family: 'Font Awesome 5 Free';
			font-weight: bold;
		}
	}

	@for $i from 1 through 8 {
		$number: $i * 50;

		&.height-#{$number} {
			height: 100%;
			padding-bottom: #{$number}px;
		}
	}
}

// 9. Dropdown
// -----------

.dropdown-pane {
	max-width: 100%;
	display: inline-block;
	box-shadow: $global-drop-shadow;
	background-color: $white;
	font-size: $small-font-size;
	min-width: 200px;
	&.is-open {
		z-index: 2000;
	}
	.card-divider, .card-section {
		&>a {
			line-height: 1rem;
			box-sizing: content-box;
		}
	}
}

.space-info-container {
	display: flex;
	align-items: center;
	flex-wrap: wrap;
	font-size: rem-calc($global-font-size * 0.875);

	&.small {
		font-size: rem-calc($global-font-size * 0.75);
	}

	&.large {
		font-size: rem-calc($global-font-size);
	}

	.flex-nowrap & {
		flex-wrap: nowrap;
		overflow: hidden;
		& > a {
			overflow: hidden;
			.space-info-block {
				span {
					overflow: hidden;
					text-overflow: ellipsis;
				}
			}
		}
	}
}

.space-info-block {
	flex-wrap: wrap;
	display: flex;
	background: $very-light-gray;
	color: $very-dark-gray;
	margin: 3px;
	border-radius: $global-radius;
	overflow: hidden;
	line-height: 1.3;
	text-align: center;
	white-space: nowrap;
	.round > & {
		border-radius: 1rem;
	}

	&.clear {
		width: 100%;
		background: none;
		margin: 1em 0;
		flex-direction: column;
		text-align: left;
		&:first-child {
			margin-top: 0;
		}
		&:last-child {
			margin-bottom: 0;
		}
		& span,
		& a {
			color: $black;
			display: block;
			padding: 0;

			&:last-child {
				color: $dark-gray;
				background: none;
			}
		}
	}

	& span {
		display: inline-block;
		padding: 0.25em 0.375em 0.125em;
		.round > & {
			border-radius: 1rem;
			padding: 0.25em 0.75em 0.125em;
		}

		&:last-child {
			@include foundation-palette($property: "background", $hover: "false");
			background: $light-gray;
		}
	}

	& a {
		display: inline-block;
		padding: 0.25em 0.375em 0.125em;
		background: $light-gray;
		color: inherit;
	}
	a:hover > & {
		background: $light-gray;
		& span:last-child {
			background: $medium-gray;
		}
	}
}
.user-space-info {
	line-height: $header-lineheight;
}

// 10. Switch, Checkbox & Radio
// ---------

.label-wrapper {
	display: flex;
	align-items: center;
	width: 100%;

	& > *:first-child {
		margin-right: 0.5rem;
	}
}
.switch {
	display: flex;
	align-items: center;

	.icon-left & {
		margin-left: auto;
	}

	[disabled] ~ .switch-paddle {
		opacity: 0.5;
	}
	.switch-paddle {
		padding: 0;
		display: flex;
		align-items: center;
		border-radius: 0;
		height: 100%;
		background: none;

		&::before {
			content: "";
			background: $medium-gray;
			height: 2px;
			width: 100%;
		}

		&::after {
			content: "";
			top: initial;
			left: 0;
			border-radius: 50%;
			box-shadow: inset 0 0 0 2px $medium-gray;
			box-sizing: content-box;
		}

		&:hover {
			&::after {
				background: $very-light-gray;
			}
		}
	}

	input:checked ~ .switch-paddle {
		color: get-color(primary);
		background: none;

		&::after {
			box-shadow: inset 0 0 0 2em currentColor;
		}

		&:hover {
			color: scale-color(get-color(primary), $lightness: -15%);
		}
	}

	@include foundation-palette($child: "input:checked ~ .switch-paddle");
}

.switch-with-labels {
	margin-right: 0.25rem;
	height: auto;
	align-items: flex-start;

	.switch-paddle {
		width: 4rem;
		flex: 0 0 4rem;
		margin: 0;
	}
	 input:checked {
		~ .switch-paddle::after {
			left: 2rem;
		 }
		 ~ .switch-paddle .switch-label-left {
			color: white;
		}
		~ .switch-paddle .switch-label-right {
			color: get-color(primary);
			zoom: 1
		}
		~ .switch-label-description-left {
			display: none;
		}
		~ .switch-label-description-right {
			display: block;
		}
	}
	.switch-paddle::before{
		height: 2rem;
		border-radius: 20px
	}
	 .switch-paddle::after {
		width:2rem;
		height:2rem;
		box-shadow: inset 0 0 0 2px $medium-gray !important;
	}

	.switch-label-left,
	.switch-label-right {
		position: absolute;
		z-index:999;
		color: white;
		zoom: 0.9;
		transition: zoom 0.5s;
	}

	.switch-label-left {
		left: 0.5rem;
		color: get-color(primary);
		zoom: 1;
	}
	.switch-label-right {
		right: 0.5rem;
	}

	.switch-label-description-right {
		display: none;
	}

	.switch-label-description-left,
	.switch-label-description-right {
		color: $body-font-color;
		margin-left: 10px;
	}
}

.checkbox,
.radio {
	display: flex;
	align-items: center;

	input {
		position: absolute;
		opacity: 0;
	}

	@include foundation-palette();

	font-size: $switch-height;
	&.small {
		font-size: $switch-height-small;
	}
	&.large {
		font-size: $switch-height-large;
	}
	.label-wrapper {
		&>span {
			padding-right: 0.5rem;
		}
	}
}
.checkbox-label,
.radio-label {
	position: relative;
	display: flex;
	justify-content: center;
	align-items: center;
	cursor: pointer;
	font-size: $switch-height;
	line-height: 1;
	margin: 0;
	width: initial;
	.small > & {
		font-size: $switch-height-small;
	}
	.large > & {
		font-size: $switch-height-large;
	}
	[disabled] ~ & {
		opacity: 0.5;
	}
	[type="checkbox"] + &,
	[type="radio"] + & {
		margin: 0;
	}
}

// Checkbox

.checkbox {
	&.round {
		.checkbox-label {
			&::before {
				border-radius: 50%;
			}
		}
	}

	// Unchecked
	.checkbox-label {
		height: 1.125em;

		&::before {
			content: "";
			box-shadow: inset 0 0 0 2px $medium-gray;
			border-radius: $global-radius-small;
			// z-index: 1;
			transition: all $global-transition-medium;
			height: 1em;
			width: 1em;
		}

		&::after {
			content: "";
			position: absolute;
			width: 0.3em;
			height: 0.55em;
			border-bottom: 2px solid transparent;
			border-right: 2px solid transparent;
			transform: rotate(45deg) translate(0.03125em, 0.03125em);
			z-index: 2;
			transition: all $global-transition-medium;
		}
		&.small {
			.checkbox-label {
				&::before {
					box-shadow: inset 0 0 0 1px $medium-gray;
				}
				&::after {
					border-width: 1px;
				}
			}
		}
	}

	// Checked
	input:checked ~ .checkbox-label {
		&::before {
			box-shadow: inset 0 0 0 2em currentColor;
			transition: all $global-transition-medium;
		}

		&::after {
			transform: rotate(45deg) translate(-0.03125em, -0.03125em);
			transition: all $global-transition-short;
			transition-delay: $global-transition-short;
			border-color: $white;
		}
	}
}

.radio {
	// Unchecked
	.radio-label {
		height: 1em;

		&::before {
			content: "";
			position: absolute;
			box-shadow: inset 0 0 0 2px $medium-gray;
			border-radius: $global-radius-small;
			// z-index: 1;
			transition: all $global-transition-medium;
			border-radius: 1em;
			height: 1em;
			width: 1em;
		}
	}

	// Checked
	input:checked ~ .radio-label {
		&::before {
			box-shadow: inset 0 0 0 calc(0.5em - 2px) currentColor;
			transition: all $global-transition-medium;
		}
	}
}
.radio-accordion {
	list-style: none;
	@include foundation-palette($child: ".radio-label");

	.radio-accordion-item {
		padding: 0.375rem 0;
	}
	.radio-label::before {
		position: relative;
	}
	.radio-accordion-content {
		margin-top: 0.375rem;
		&:not(.visible) {
			display: none;
		}
	}
}

// 11. Button & Input
// ---------

$input-height: 2rem;

[type="text"],
[type="password"],
[type="date"],
[type="datetime"],
[type="datetime-local"],
[type="month"],
[type="week"],
[type="email"],
[type="number"],
[type="search"],
[type="tel"],
[type="time"],
[type="url"],
[type="color"] {
	height: $input-height;
	padding: $label-padding;
	line-height: $form-label-line-height;
}
[type="checkbox"],
[type="radio"] {
	& + label {
		display: flex;
	}
}
select {
	height: $input-height;
	padding: $label-padding;
	padding-right: 1.5rem;
	line-height: $form-label-line-height;
	& + button,
	& + .button {
		height: $input-height;
	}
	&:first-child {
		margin-top: 0;
	}
	&:last-child {
		margin-bottom: 0;
	}
}
.input-group {
	margin: 0;
	.input-group-label {
		padding: $label-padding;
	}
	.input-group-field {
		&:first-child {
			border-radius: $global-radius 0 0 $global-radius;
		}
		&:last-child {
			border-radius: 0 $global-radius $global-radius 0;
		}
	}
}

.help-text {
	margin-top: 0.375rem;
	font-size: 0.75rem;
	font-style: normal;
	color: $dark-gray;
	line-height: 1.3;
}
.form-error {
	margin-top: 0.375rem;
	line-height: 1.3;
}

.button {
	justify-content: center;
	&.expanded {
		box-sizing: border-box;
	}
	.menu & {
		padding: $button-padding;
	}
	&.load {
		transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1) 0s;
		color: #fff !important;
		// background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
		// background-size: 300% 300%;
		background-color: get-color(success);
		animation: backgound-pulse 2s $global-transition-timing-cubic-bezier infinite;
	}
}

.button-group {
	border-radius: $global-radius;
	overflow: hidden;
	input {
		width: initial;
	}
	button,
	.button, select, input {
		margin-bottom: 0;
		&:hover {
			z-index: 1;
		}
		&:not(:first-child):not(:last-child) {
			border-radius: 0;
		}
		&:first-child:not(:last-child) {
			border-radius: $global-radius 0 0 $global-radius;
		}
		&:last-child:not(:first-child) {
			margin-right: 0;
			border-radius: 0 $global-radius $global-radius 0;
		}
		&.hollow {
			&:not(:last-child) {
				margin-right: -1px;
			}
		}
	}
	button, .button {
		&:not(.hollow) + .hollow {
			margin-left: -2px;
		}
	}
	&.hollow {
		button,
		.button, select, input {
			&:first-child {
				border-radius: $global-radius 0 0 $global-radius;
			}
			&:last-child {
				border-radius: 0 $global-radius $global-radius 0;
			}
			&:not(:last-child) {
				margin-right: -1px;
			}
		}
	}
	&.expanded {
		width: 100%;
		button,
		.button, select {
			&:not(:last-child) {
				margin-right: 1px;
			}
		}
	}
}
.input-group {
	button,
	.button,
	input,
	.input,
	select,
	textarea {
		margin-bottom: 0;
	}
	margin-bottom: $paragraph-margin-bottom;
}
button,
.button,
input,
.input,
select,
.button-group,
textarea {
	&:focus,
	&:active {
		outline: none;
	}

	&:last-child {
		margin-bottom: 0;
	}

	.card-section.no-padding:not(:first-child) &,
	.card-divider.no-padding:not(:first-child) & {
		border-top-left-radius: 0;
		border-top-right-radius: 0;
	}
	.card-section.no-padding:not(:last-child) &,
	.card-divider.no-padding:not(:last-child) & {
		border-bottom-left-radius: 0;
		border-bottom-right-radius: 0;
	}
}

@keyframes gradient {
	0% {
		background-position: 0% 50%;
	}
	50% {
		background-position: 100% 50%;
	}
	100% {
		background-position: 0% 50%;
	}
}
@keyframes backgound-pulse {
	0% {
		background-color: rgba( get-color(success), 1);
	}
	50% {
		background-color: rgba( get-color(success), .5);
	}
	100% {
		background-color: rgba( get-color(success), 1);
	}
}

// 12. Dot Menu
// ---------

.dots,
.add {
	cursor: pointer;
	z-index: 50;
	width: 2.25rem;
	height: 2rem;
	color: $dark-gray;

	&:hover {
		color: $black;
	}

	&::after {
		position: relative;
		display: flex;
		justify-content: center;
		align-items: center;
		width: 2.25rem;
		line-height: 0;
		font-weight: $global-weight-bold;
		font-size: 1.25rem;
		white-space: nowrap;
		color: currentColor;
	}
	&.hidden {
		display: none;
	}
	&.visible {
		display: block !important;
	}
}
.dots {
	padding-bottom: 0.675rem;
	&::after {
		content: "...";
		letter-spacing: 0.03125rem;
		height: 0;
	}
}
.add {
	&::after {
		content: "+";
		height: 2rem;
	}
}
.reply-button {
	a {
		&::after {
			content: "reply";
			padding: 0.5rem;
			font-size: 0.75rem;
			color: $dark-gray;
		}
		&:hover::after {
			color: $black;
		}
	}
}
.edit-button {
	a {
		padding: 0.5rem;
		font-size: 0.75rem;
		color: $dark-gray;
		&:hover {
			color: $black;
		}
	}
	// a {
	// 	&::after {
	// 		content: "edit";
	// 		padding: 0.5rem;
	// 		font-size: 0.75rem;
	// 		color: $dark-gray;
	// 	}
	// 	&:hover::after {
	// 		color: $black;
	// 	}
	// }
}
.edit-bar {
	display: flex;
	align-items: center;
	margin-left: auto;
}
// 13. Excerpt
// ---------
@mixin excerpt(
	$font-size: 1em,
	$line-height: 1.4,
	$lines-to-show: 3,
	$expand: false
) {
	@if $expand==true {
		max-height: initial;
		/* Fallback for non-webkit */
		-webkit-line-clamp: initial;
		-webkit-box-orient: vertical;
		overflow: initial;
		text-overflow: initial;
	} @else {
		max-height: $font-size * $line-height * $lines-to-show;
		/* Fallback for non-webkit */
		-webkit-line-clamp: $lines-to-show;
		-webkit-box-orient: vertical;
		overflow: hidden;
		text-overflow: ellipsis;
	}

	line-height: $line-height;
	display: block;
	/* Fallback for non-webkit */
	display: -webkit-box;
	font-size: $font-size;
}

.description-excerpt {
	@include excerpt($lines-to-show: 3);
}

.description-excerpt-checkbox {
	position: absolute;
	margin: 0;
	opacity: 0;

	&:checked ~ .description-excerpt {
		@include excerpt($expand: true);
	}

	& + label {
		vertical-align: initial;
		margin: initial;
	}
}

// 14. Menu
// ---------
$border: 1px solid $very-light-gray;

.menu {
	a,
	.button {
		display: flex;
		&.no-padding {
			padding: 0;
		}
	}
	li {
		&[role="menuitem"],
		&[role="treeitem"] {
			list-style: none;
		}
	}
}
.main-menu {
	color: $very-dark-gray;
	background-color: $white;
	position: relative;
	z-index: 1000;
	hr {
		margin: 0 auto;
		border-bottom: $hr-border;
	}

	.menu {
		font-size: 0.875rem;
		&.dropdown {
			flex-wrap: nowrap;
			li {
				min-width: 0;
			}
		}

		li {
			&.menu-main-expand {
				position: static;

				.menu {
					width: 100%;
				}
			}

			&.no-arrow {
				& > a {
					padding-right: #{nth($dropdownmenu-padding, 1)};

					&::after {
						display: none;
					}
				}
			}

			input[type="search"] {
				border: none;
				box-shadow: none;
			}

			.menu-anchor {
				fill: currentColor;
			}
		}

		& > .navbar-icon {
			& > a {
				justify-content: center;
				min-width: 48px;

				& > svg {
					width: 0.875rem;
				}
			}
		}
	}
}
.main-menu .menu {
	&.dropdown {
		& > .navbar-icon {
			& > a {
				& > span {
					display: initial;

					& + svg {
						display: none;
					}
				}
			}
		}

		@for $i from 1 through 5 {
			& > [data-order="#{$i}"] {
				order: $i;

				& > .is-dropdown-submenu {
					right: 0 !important;
					left: auto !important;
				}

				@if ($i==1) {
					margin-left: auto;
				}
			}
		}
	}
	&.accordion-menu {
		justify-content: space-around;

		& > li {
			&.navbar-icon {
				justify-content: center;
				flex-grow: 1;
				flex-basis: 0;
				order: -1;

				& > a {
					& > span {
						display: none;
					}

					&::after {
						display: none;
					}
				}
			}

			& > .menu-anchor {
				height: 48px;
				box-sizing: border-box;
				align-items: center;
				display: flex;
				color: $dark-gray;
				fill: currentColor;
			}

			&:not(.navbar-icon) {
				display: none;

				#menu-state:checked ~ & {
					display: block;
				}
			}
		}

		& > .flex-spacer-left {
			margin-left: initial;
		}
	}
}

.caret {
	content: '\f078';
	font-family: 'Font Awesome 5 Free';
	font-size: 0.625em;
	font-weight: bold;
	align-self: center;
	border: none;
}
.caret-icon {
	&::after {
		@extend .caret;
	}
}
.main-menu {
	.dropdown .menu-anchor:hover {
		background: $very-light-gray;
	}
	& > * > .dropdown,
	& > * > .accordion-menu {
		.submenu {
			border-top: $hr-border;
			border-radius: 0 0 $global-radius $global-radius;
			// overflow: hidden; // if you have lots of blogcategories the selectbox is cropped.
			box-shadow: $global-drop-shadow;
			z-index: 1; // enforce drop-shadow hierachie.
			a {
				border-right: none;
			}
			.submenu-element {
				.notifications-item:hover {
					background: $very-light-gray;
				}
			}
			a.submenu-element:hover {
				background: $very-light-gray;
			}
			.is-submenu-item, .is-submenu-item {
				&:first-child a.submenu-element {
					padding-top: 1rem;
				}

				&:last-child {
					border-radius: 0 0 $global-radius $global-radius;
					a.submenu-element {
						padding-bottom: 1rem;
					}
					&>*, .submenu-element>*{
						border-radius: 0 0 $global-radius $global-radius;
					}
				}
			}

			.card-anchor {
				padding: 0;
			}
		}
	}
}
.accordion-menu .is-accordion-submenu-parent,
.accordion .accordion-item {
	& > a {
		&::after {
			@extend .caret;
			margin-left: auto;
		}
		&[aria-expanded="false"]::after {
			transform: rotate(-90deg);
			transition: $global-transition-medium;
		}
		&[aria-expanded="true"]::after {
			transform: rotate(-180deg);
			transition: $global-transition-medium;
		}
	}
	&[aria-expanded="false"] > a::after {
		transform: rotate(-90deg);
		transition: $global-transition-medium;
	}
	&[aria-expanded="true"] > a::after {
		transform: rotate(-180deg);
		transition: $global-transition-medium;
	}
}

.accordion-menu {
	// .is-accordion-submenu-parent:not(.has-submenu-toggle) {
	//	 &>a {
	// 		&::after {
	// 			@extend .caret;
	// 			display: inline-block;
	// 			width: 0.62em;
	// 			margin-left: 0.5em;
	// 		}
	// 		// span {
	// 		// 	width: 100%;
	// 		// }
	//	 }
	//	 &[aria-expanded='false']>a::after {
	//		 transform: rotate(-90deg);
	//		 transition: $global-transition-medium;
	//	 }
	//	 &[aria-expanded='true']>a::after {
	//		 transform: rotate(-180deg);
	//		 transition: $global-transition-medium;
	// 	}
	// }
	.menu-item {
		&>a:hover {
			background-color: $very-light-gray;
		}
	}
	&>.menu-item {
		&:first-child:not(:last-child)>a {
			padding-top: nth($global-menu-padding, 2);
		}
		&:last-child:not(:first-child)>a {
			padding-bottom:nth($global-menu-padding, 2);
		}
	}
	.sub-menu {
		margin-left:nth($global-menu-padding, 2);
	}
	.button {
		text-align: left;
	}

	& > .navbar-icon {
		position: static;
		width: initial;

		.submenu {
			position: absolute;
			left: 0;
			top: 3rem;
			background: $white;
		}
	}
}

.dropdown {
	& > li > a {
		display: flex;
		align-items: center;
		height: 48px;
		box-sizing: border-box;
	}

	&.menu {
		& > li {
			img.avatar {
				padding: 0;
			}
			&.no-padding > a,
			& > a.no-padding {
				padding: 0 !important;
			}

			& > a {
				@include breakpoint(medium down) {
					padding: 0.5rem;
				}
			}

			&.is-dropdown-submenu-parent > a {
				&::after {
					@extend .caret;
					margin-right: 0.75rem;
					line-height: 0.75;
				}
			}
			&.is-dropdown-submenu-parent:not(.no-arrow) > a {
				@include breakpoint(medium down) {
					padding-right: 1.25rem;
				}
			}
		}
	}
}

li {
	& > label,
	& > span,
	& > a {
		.menu.icon-left > &,
		.menu.icon-right > & {
			width: 100%;
			display: flex;
			-ms-flex-flow: row nowrap;
			flex-flow: row nowrap;
			align-items: center;
			justify-content: flex-start;
		}
	}
}

// 15. Icons
// ---------

.icons {
	&.icon-left {
		li {
			i {
				margin-right: 0.5rem;
			}
		}
	}
}
img,
i,
svg {
	.icons & {
		font-size: 0.75rem;
		width: 1.5em;
		display: flex;
		justify-content: center;
	}
	.icons.icon-left > & {
		margin-right: $menu-icon-spacing;
	}
	.icons.icon-right > & {
		margin-left: $menu-icon-spacing;
	}
}
i.fa {
	font-style: normal;
}

$icon-line-weight: 2;

.sandwich-icon,
.search-icon,
.flat-arrow-down-icon {
	cursor: pointer;
	border-radius: 20px;
	position: relative;
	display: flex;
	align-items: center;
	justify-content: center;
	width: 48px;
	height: 48px;
	padding: 12px;
	color: inherit;
	box-sizing: border-box;

	&::before,
	&::after {
		content: "";
		position: absolute;
		display: block;
		height: $icon-line-weight * 1px;
		box-shadow: inset 0 0 0 $icon-line-weight * 1px currentColor;
		transition-duration: $global-transition-medium;
		transition-timing-function: $global-transition-timing-cubic-bezier;
	}
}

.search-icon {
	&::before,
	&::after {
		transition-property: width, height, border-radius, transform;
	}

	&::before {
		height: 14px;
		width: 14px;
		border-radius: 20px;
		@include cross-browser(transform, rotate(0));

		.search-container.is-active ~ & {
			height: 20px;
			width: $icon-line-weight * 1px;
			border-radius: 0;
			@include cross-browser(transform, rotate(45deg));
		}
	}

	&::after {
		width: 6px;
		@include cross-browser(transform, translate(6px, 6px) rotate(45deg));

		.search-container.is-active ~ & {
			width: 20px;
			@include cross-browser(transform, translate(0) rotate(45deg));
		}
	}
}


.search-container {
	position: fixed;
	display: flex;
	justify-content: center;
	top: 10vh;
	left: 0;
	z-index: 100;
	width: 100vw;
	pointer-events: none;

	@each $breakpoint, $width in $breakpoints {
		@include breakpoint($breakpoint) {
			$grid-container-gutter: map-get($grid-container-padding, #{$breakpoint});
			padding: 0 $grid-container-gutter;
		}
	}
	.spinner-container {
		margin-left: -2rem;
		margin-top: 1.125rem;
		width: 2rem;
		z-index: 100;
	}
	&:not(.is-active) {
		.spinner-container {
			display: none !important;
		}
	}
	&::after {
		content: '';
		position: fixed;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;
		z-index: 10;
		background: #000000;
		opacity: 0;
		will-change: opacity;
		transition: $global-transition-medium;
	}
	span.twitter-typeahead {
		opacity: 0;
		pointer-events: none;
		z-index: 100;
		box-shadow: $global-drop-shadow;
		height: initial !important;
		transform: scale(0.97);
		transition: $global-transition-medium;
		width: auto;
    max-width: 100%;
	}
	input.twitter-typeahead {
		height: $user-card-default-size;
		border: none;
		padding: $global-padding;
		width: map-get($breakpoints, 'medium');
    max-width: 100%;
		&.is-active {
			border-radius: $global-radius-small $global-radius-small 0 0;
			border-bottom: $hr-border;
		}
	}
	&.is-active {
		pointer-events: all;
		&::after {
			opacity: 0.5;
			will-change: opacity;
			transition: $global-transition-medium;
		}
		span.twitter-typeahead {
			opacity: 1;
			pointer-events: all;
			transform: scale(1);
			transition: $global-transition-medium;
			box-shadow: $global-drop-shadow-large;
		}
	}
	.tt-menu {
		position: relative !important;
		top: 0 !important;
    max-height: calc(70vh);
		overflow-y: auto;
	}
	.tt-menu {
		position: relative !important;
		top: 0 !important;
    max-height: calc(70vh);
		overflow-y: auto;
	}
}
.user.tt-suggestion.cursor,
.user.tt-suggestion:hover {
	background-color: $very-light-gray;
}
.user.tt-suggestion.cursor,
.user.tt-suggestion:hover {
	background-color: $very-light-gray;
}

.twitter-typeahead.tt-hint {
	display: none;
	.search-container.is-active & {
		display: block;
	}
}
#menu-state {
	display: none;
}

.sandwich-icon {
	display: flex;
	align-items: center;
	justify-content: center;

	&::before,
	&::after {
		width: 20px;
		transition-property: transform;
	}

	&::before {
		@include cross-browser(transform, translate(0, -5px) rotate(0deg));

		#menu-state:checked ~ nav & {
			@include cross-browser(transform, translate(0, 0) rotate(-45deg));
		}
	}

	&::after {
		@include cross-browser(transform, translate(0, 5px) rotate(0deg));

		#menu-state:checked ~ nav & {
			@include cross-browser(transform, translate(0, 0) rotate(45deg));
		}
	}
}

.flat-arrow-down-icon {
	height: 24px;
	display: flex;
	align-items: center;
	justify-content: center;
	z-index: 1;

	&::before,
	&::after {
		width: 20px;
		transition-property: transform;
	}

	&::before {
		@include cross-browser(transform, translate(-45%, 0) rotate(22.5deg));

		.is-active & {
			@include cross-browser(transform, translate(-45%, 0) rotate(-22.5deg));
		}
	}

	&::after {
		@include cross-browser(transform, translate(45%, 0) rotate(-22.5deg));

		.is-active & {
			@include cross-browser(transform, translate(45%, 0) rotate(22.5deg));
		}
	}
}

// 16. Tabs
// ---------

.tabs {
	display: flex;
	overflow: hidden;
	border: none;
	font-size: $paragraph-font-size;
	&::before,
	&::after {
		width: 0;
	}

	&.small {
		font-size: $small-font-size;
	}

	&.large {
		font-size: $global-font-size;
	}
	.tabs-title {
		text-align: center;
		float: initial;
		min-width: 0;
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
		& > a {
			display: flex;
			align-items: center;
			justify-content: center;
			color: inherit;
			min-height: 36px;
			& > *:last-child:not(:first-child) {
				margin-left: 0.5em;
			}
			span {
				overflow: hidden;
				text-overflow: ellipsis;
				white-space: nowrap;
			}
		}
		&.is-active-tab,
		&.is-active {
			& > a {
				background: $very-light-gray;
			}
		}
	}

	&.expanded {
		.tabs-title {
			width: 100%;
		}
	}
	&.label-is-active {
		.tabs-title {
			min-width: auto;
			overflow: initial;
			span {
				transition-duration: $global-transition-long;
				overflow: hidden;
				max-width: 150px;
				line-height:$header-lineheight;
			}
			&:not(.is-active) {
				span {
					transition-duration: $global-transition-medium;
					margin-left: 0;
					max-width: 0;
				}
			}
		}
	}

	&.line {
		.tabs-title {
			& > a {
				&:hover {
					background: none;
					box-shadow: inset 0 -2px rgba($black, 0.17);
				}

				&:focus {
					background: none;
				}
				&.is-active-tab,
				&.is-active {
					background: none;
					box-shadow: inset 0 -2px $dark-gray;
				}
			}

			&.is-active-tab,
			&.is-active {
				& > a {
					background: none;
					box-shadow: inset 0 -2px $dark-gray;
				}
			}
		}
		& + .tabs-content .tabs-panel {
			border-top: #{nth($hr-border, 1)} solid rgba($dark-gray, 0.17);
		}
	}

	&.bar {
		border-bottom: none;
		// &:last-child {
		// 	border-bottom: none;
		// }
		.tabs-title {
			border-right: $hr-border;

			&:last-child {
				border-right: none;
			}

			& > a {
				&:hover {
					background: $very-light-gray;
				}
				&:focus,
				&[aria-selected="true"] {
					background: $very-light-gray;
				}
			}
		}
	}

	&.image {
		.tabs-title {
			text-align: left;

			.title {
				position: absolute;
				width: 100%;
				height: 100%;
				display: flex;
				justify-content: flex-end;
				flex-direction: column;
				padding: $global-padding;
				font-weight: $global-weight-bold;
				line-height: $header-lineheight;
				z-index: 10;
				pointer-events: none;

				& > * {
					pointer-events: all;
				}

				& > span {
					margin-bottom: $header-margin-bottom;
					white-space: initial;

					&:last-child {
						margin-bottom: initial;
					}
				}

				@include header-style("h3", "font-size");
			}
		}
	}
}

.tabs-content {
	border: none;
	&[data-transition] .tabs-panel {
		display: none;
	}
	// .card>&:last-child {
	// 	border-radius: 0 0 $global-radius $global-radius;
	// }
}

.tabs-panel.is-active-tab {
	display: block;
}

// 17. Scroll Snapping
// ---------

.left-right-navigation {
	position: relative;

	&:hover {
		&::before,
		&::after {
			opacity: 1;
			transition: opacity $global-transition-medium;
		}
	}

	&::before,
	&::after {
		opacity: 0;
		transition: opacity $global-transition-medium;
		display: flex;
		position: absolute;
		top: 50%;
		@include cross-browser(transform, translateY(-50%));
		padding: $global-padding;
		background: $white;
		border-radius: $global-radius-small;
		box-shadow: $global-drop-shadow;
		font-family: 'Font Awesome 5 Free';
		font-size: 1rem;
		font-weight: $global-weight-bold;
		z-index: 10;
	}

	&::before {
		content: "\f104";
		left: $global-gutter-small;
	}

	&::after {
		content: "\f105";
		right: $global-gutter-small;
	}
}

.scroll-snap-container-x {
	@include xy-grid(
		$direction: horizontal,
		$wrap: false
	);
	position: relative;
	overflow-x: auto;
	overflow-y: hidden;
	-webkit-overflow-scrolling: touch;

	@include cross-browser(scroll-snap-type, x mandatory);

	.scroll-snap-element {
		width: initial;
		max-width: 100%;
		width: 100%;
		min-width: 100%;
		width: initial;
		box-sizing: border-box;
		margin: 0;
		flex: 1 1 100%;

		& > span {
			position: relative;
			left: 0.5rem;

			& + * {
				margin-top: 0.5rem;
			}
		}
	}

	&.snap-align-start .scroll-snap-element {
		@include cross-browser(scroll-snap-align, start);
	}

	&.snap-align-center .scroll-snap-element {
		@include cross-browser(scroll-snap-align, center);
	}

	&.snap-align-end .scroll-snap-element {
		@include cross-browser(scroll-snap-align, end);
	}

	&.width-small .scroll-snap-element {
		min-width: 20%;
	}
	&.width-medium .scroll-snap-element {
		min-width: 40%;
	}
	&.width-large .scroll-snap-element {
		min-width: 60%;
	}
	&.width-xlarge .scroll-snap-element {
		min-width: 80%;
	}
	&.width-fixed-small .scroll-snap-element {
		min-width: 240px;
	}
	&.width-fixed-medium .scroll-snap-element {
		min-width: 320px;
	}
	&.width-fixed-large .scroll-snap-element {
		min-width: 480px;
	}
	// &.scroll-snap-grid-container {
	// 	&.width-xlarge .scroll-snap-element {
	// 		min-width: calc( #{$grid-container} * 0.8 );
	// 	}
	// 	&.width-large .scroll-snap-element {
	// 		min-width: calc( #{$grid-container} * 0.6 );
	// 	}
	// 	&.width-medium .scroll-snap-element {
	// 		min-width: calc( #{$grid-container} * 0.4 );
	// 	}
	// 	&.width-small .scroll-snap-element {
	// 		min-width: calc( #{$grid-container} * 0.2 );
	// 	}
	// }
}

@each $breakpoint, $width in $breakpoints {
	.#{$breakpoint}-scroll-snap.scroll-snap-container-x {
		display: block;
	}
	@include breakpoint(#{$breakpoint} up) {
		.scroll-snap-container-x {
			&.#{$breakpoint}-scroll-snap {
				display: flex;
			}
			&.#{$breakpoint}-no-scroll-snap {
				display: block;
				.scroll-snap-element {
					min-width: 100%;
				}
			}
		}
	}
	@include breakpoint(#{$breakpoint}) {
		.scroll-snap-element {
			@include xy-cell-gutters(
				$gutter-type: padding,
				$gutter-position: top right bottom left,
				$breakpoint: #{$breakpoint}
			);
		}
	}
}

/**
* Todo Create a Fallback if global width is bigger than the biggest breakpoint defined in a cell.
* $breakpoint-fallback is a start, not finished yet, though.
* At the moment $global width should no exceed width of 'large' breakpoint.
*/
.scroll-snap-container-x {
	$widescreen-breakpoint: "";

	.grid-x {
		$breakpoint-fallback: ();

		// loop through each breakpoint-list-item.
		@each $breakpoint, $width in $breakpoints {
			$index: index(($breakpoints), ($breakpoint $width)) !global;

			@if $index==1 {
				$breakpoint-fallback: append($breakpoint-fallback, $breakpoint);
			}

			// set up media-query.
			@include breakpoint($breakpoint) {
				// loop through all possible column counts.
				@for $i from 1 through $grid-column-count {
					// set gutter width
					$grid-margin-gutter: map-get($grid-margin-gutters, #{$breakpoint});
					$grid-container-gutter: map-get(
						$grid-container-padding,
						#{$breakpoint}
					);

					// this is the cell, e.g. medium-8.
					& > .#{$breakpoint}-#{$i} {
						$container-width: 100vw;

						/**
						* If breakpoint width is greater or equal to grid-container we set the
						* reference width from 100vw to the grid-container.
						*/
						@if (
							strip-unit(rem-calc(strip-unit($width)))
								>=strip-unit($grid-container)
						) {
							@if ($widescreen-breakpoint== "") {
								$widescreen-breakpoint: $breakpoint;
							}

							$container-width: $grid-container;
						}

						// This is where the magic happens.
						width: calc(
							(#{$container-width} - #{$grid-container-gutter}) /
								(#{$grid-column-count} / #{$i}) -
								#{$grid-margin-gutter}
						);
					}
				}
			}

			$breakpoint-fallback: append($breakpoint-fallback, $breakpoint);
		}
	}

	.grid-container & {
		@each $breakpoint, $width in $breakpoints {
			@include breakpoint($breakpoint) {
				$gutter: map-get($grid-container-padding, #{$breakpoint});
				$gutter-padding: calc(#{$gutter} / 4);
				$grid-padding: calc(50vw - (#{$grid-container} / 2) + #{$gutter-padding});

				width: calc(100% + #{$gutter});
				margin: calc(-#{$gutter} / 2);
				padding: $gutter-padding;


				&.scroll-snap-grid-container {
					width: 100vw;
					margin: 0;
					padding-left: $grid-padding;
					&:after {
						content: '';
						min-width: $grid-padding;
						height: 10px;
					}
					@media screen and (max-width: #{$grid-container}) {
					padding-left: $gutter-padding;
						&:after {
							min-width: $gutter-padding;
						}
					}
				}

			}
		}
	}
}

// 17. Sections
// -----------

.section-title {
	@include header-style("h1");
	font-weight: $global-weight-bold;
	line-height: $header-lineheight;
}

.section-header {
	@include header-style("h2");
	font-weight: $global-weight-normal;
	line-height: $header-lineheight;
}

.section-wrap {
	margin: 2rem auto;
	width: 100%;
	max-width: $global-width;

	&.small {
		max-width: calc($global-width / 3 * 2);
	}

	@include breakpoint(medium) {
		width: $global-width;
	}
}

// 18. Calendar
// ---------

.calendar-icon {
	display: flex;
	flex-direction: column;
	height: 48px;
	width: 48px;
	flex: 0 0 auto;
	border-radius: 3px;
	overflow: hidden;
	border-radius: $global-radius;
	text-align: center;
	font-weight: $global-weight-bold;
	line-height: $global-lineheight;
	background-color: $card-background;
	box-shadow: 0 0 0 nth($hr-border, 1) nth($hr-border, 3);
	transition: box-shadow $global-transition-medium $global-transition-timing;
	.event-item:hover & {
		box-shadow: $global-drop-shadow;
	}
	.month {
		display: flex;
		text-transform: uppercase;
		justify-content: center;
		color: $white;
		background: get-color(alert);
		background: gradient(get-color(alert), 30deg, 20%);
		font-size: 0.75rem;
		height: 38.2%;
	}

	.day {
		display: flex;

		justify-content: center;
		align-items: center;
		font-size: 1.25rem;
		color: $black;
		height: 61.8%;
	}
}
.event-items-container {
	&:before, &:after {
		content: '';
		position: absolute;
		width: 1rem;
		height: 100%;
		top: 0;
		z-index: 10;
	}
	&:before {
		left: 0;
		box-shadow: inset $global-gutter-large 0 calc(#{$global-gutter-large} / 2) calc(-#{$global-gutter-large} / 2) $body-background;
	}
	&:after {
		box-shadow: inset -#{$global-gutter-large} 0 calc(#{$global-gutter-large} / 2) calc(-#{$global-gutter-large} / 2) $body-background;
		right: 0;
	}
}

// 19. Utilities
// ---------

.flex-spacer-left {
	margin-left: auto;
}
.flex-spacer-right {
	margin-right: auto;
}
.flex-spacer-around {
	margin-left: auto;
	margin-right: auto;
}
.width-article {
	width: 640px;
}
.no-padding {
	padding: 0;

	& > a {
		display: flex;
	}
}
.dynamic-padding {
	@include dynamic-box();
}
.disabled {
	opacity: 0.5;
	pointer-events: none;
	cursor: not-allowed;
}
@each $size-name, $size in $padding-sizes {
	.margin-#{$size-name} {
		margin: $size;
	}
	.padding-#{$size-name} {
		padding: $size;
		& > a,
		& > a:last-child {
			&,
			& > label {
				display: flex;
				align-items: center;
				width: 100%;
				padding: $size;

				@if length($size) >3 {
					margin: (nth($size, 1) * -1)
						(nth($size, 2) * -1)
						(nth($size, 3) * -1)
						(nth($size, 4) * -1);
				} @else if length($size) >2 {
					margin: (nth($size, 1) * -1)
						(nth($size, 2) * -1)
						(nth($size, 3) * -1);
				} @else if length($size) >1 {
					margin: (nth($size, 1) * -1) (nth($size, 2) * -1);
				} @else {
					margin: $size * -1;
				}
			}
			& + * {
				margin-top: nth($size, 1);
			}
		}
	}
}
.flex {
	display: flex !important;
}
.align-flex-start {
	justify-content: flex-start;
}
.align-flex-end {
	justify-content: flex-end;
}
.flex-wrap {
	flex-wrap: wrap;
}
.flex-nowrap {
	flex-wrap: nowrap;
}
.sticky {
	position: -webkit-sticky;
	position: sticky;
	z-index: 200;
	&.card-divider,
	&.card-section {
		background: $card-background;
	}
	&[data-sticky-top] {
		top: 0;
	}
	&[data-sticky-bottom] {
		bottom: 0;
	}
	@each $breakpoint, $width in $breakpoints {
		@include breakpoint($breakpoint) {
			$grid-padding-gutter: map-get($grid-padding-gutters, #{$breakpoint});
			&[data-sticky-top="padding"] {
				top: $grid-padding-gutter / 2;
			}
			&[data-sticky-bottom="padding"] {
				bottom: $grid-padding-gutter / 2;
			}
		}
	}
}

// 20. Orbit
// ---------

.orbit-controls {
	color: $light-gray;
}
.orbit-previous,
.orbit-next {
	@include cross-browser(border-radius, 50px);
	color: $light-gray;
	display: flex;
	width: 36px;
	height: 36px;
	align-items: center;
	justify-content: center;
	cursor: pointer;
	font-size: 1.5rem;
	padding: 0;
	&:before, &:after {
		font-family: 'Font Awesome 5 Free';
		font-weight: bold;
		font-size: 0.75em;
	}
}
.orbit-previous {
	left: 5px;
	&::after {
		content: "\f053";
	}
}
.orbit-next {
	right: 5px;
	&::after {
		content: "\f054";
	}
}
.orbit-bullets {
	button {
		cursor: pointer;
	}
}

.orbit-container {
	max-height: 60vh;
}

.orbit-slide {
	text-align: center;
}

.orbit-caption {
	position: absolute;
	background-color: $white;
	color: $very-dark-gray;
	opacity: 0.7;
}

// 21. Spinner
// ---------

$spinner-sizes: (
	tiny: $switch-height-tiny,
	small: $switch-height-small,
	medium: $switch-height,
	large: $switch-height-large
);

.spinner {
	border: 2px solid rgba($black, 0.17);
	border-radius: 50%;
	border-top: 2px solid get-color(primary);
	animation: spin 0.875s infinite cubic-bezier(0.9, 0.3, 0.3, 0.7);
	width: 1.5rem;
	height: 1.5rem;

	@each $size-name, $size in $spinner-sizes {
		&.#{$size-name} {
			width: $size;
			height: $size;
		}
	}
	&.quick {
		animation-duration: 0.5s;
	}
	&.slow {
		animation-duration: 1.5s;
	}
}
@keyframes spin {
	0% {
		transform: rotate(-20deg);
	}
	100% {
		transform: rotate(340deg);
	}
}

// 22. Typeahead
// ---------

.tt-menu {
	width: 100%;
	background-color: $dropdown-background;
	border-radius: 0 0 $global-radius $global-radius;
	overflow: hidden;
}
.twitter-typeahead,
.tt-input,
.tt-hint {
	width: 100%;
	font-size: $paragraph-font-size;
	margin-bottom: 0;
	.menu & {
		height: 40px;
	}
}
.tt-suggestion {
	display: flex;
	align-items: baseline;
	span, small {
		font-size: $small-font-size;
		white-space: nowrap;
		text-overflow: ellipsis;
		overflow: hidden;
	}
	&.tt-cursor {
		background-color: get-color(primary);
		&:after {
			content: '\f067';
			font-family: 'Font Awesome 5 Free';
			font-weight: bold;
			margin-left: auto;
			font-size: 0.625rem;
		}
		span, small, &:after {
			color: #fff;
		}
	}
	.card {
		width: 100%;
	}
}
.menu .twitter-typeahead {
	.tt-dataset-blogs:not(:empty) {
		padding: nth(map-get($padding-sizes, medium), 1);
		.tt-suggestion {
			padding: nth(map-get($padding-sizes, medium), 1);
		}
	}

	.tt-suggestion {
		padding: 0;
		&.user {
			position: relative;
			display: flex;
			align-items: flex-start;
		}
		.v-center {
			padding: 0;
			.sf-user-image {
				min-width: 48px;
				width: 48px;
				height: 48px;
				margin-left: 0;
				margin-right: 0.875rem;
				img {
					min-width: 48px;
					width: 48px;
					height: 48px;
				}
			}
		}
	}
}
.no-found {
	padding: $button-padding;
	font-size: $small-font-size;
	color: $dark-gray;
}
.add-user-typeahead {
	position: relative;
	width: 100%;
	&::before {
		content: "\f002";
		font-family: 'Font Awesome 5 Free';
		font-weight: bold;
		font-size: 0.75rem;
		position: absolute;
		z-index: 1;
		padding: $button-padding;
		color: $dark-gray;
	}
	input {
		width: 100%;
		padding-left: 2rem;
	}
	.tt-suggestion {
		padding: $button-padding;
		line-height: $header-lineheight;
		border-bottom: $hr-border;
		cursor: pointer;
		&:last-child {
			padding-bottom: 10px;
			border: none;
		}
		&.tt-cursor {
			background-color: get-color(success);
		}
	}
	.spinner-container {
		position: absolute;
		top: 0;
		right: nth($button-padding, 1);
		display: none;
		align-items: center;
		height: 100%;
	}
}

.shake {
	animation: shake 0.4s 1 linear;
}

@keyframes shake {
	8%,
	41% {
		-webkit-transform: translateX(-0.25em);
	}
	25%,
	58% {
		-webkit-transform: translateX(0.25em);
	}
	75% {
		-webkit-transform: translateX(-0.1em);
	}
	92% {
		-webkit-transform: translateX(0.1em);
	}
	0%,
	100% {
		-webkit-transform: translateX(0);
	}
}




.sf-switch-to {
	position: absolute;
	right: -50px;
	background: $card-background;
	opacity: 0;
	pointer-events: none;
	transition: $global-transition-medium ease-in-out;
	align-self: center;
	&>a {
		padding: map-get($padding-sizes, small);
		box-shadow: 0 0 0 nth($hr-border, 1) nth($hr-border, 3);
		border-radius: $global-radius 0 0 $global-radius;
		display: flex;
		align-items: center;
		transition: $global-transition-medium ease-in-out;
		&:hover {
			box-shadow: $global-drop-shadow;
			background: $card-background !important;
		}
	}
	.user:hover & {
		right: 0;
		opacity: 1;
		pointer-events: all;
	}
}




// 23. Accordion
// ---------

.accordion {
	.accordion-item {
		position: relative;
		&:first-child>:first-child {
			word-break: break-word;
			@include cross-browser(hyphens, auto);
		}
		.expand-button {
			position: absolute;
			top: 0;
			right: 0;
			width: $user-card-default-size / 1.5;
			height: $user-card-default-size / 1.5;
			display: flex;
			opacity: 0;
			align-items: center;
			justify-content: center;
			z-index: 100;
			&::after {
				@extend .caret;
				margin-left: 0.5em;
				opacity: 0.5;
			}
			&:hover {
				&::after {
					opacity: 1;
				}
			}
		}
	}
	.accordion-content {
		border: none;
	}
	&:hover {
		.expand-button {
			opacity: 1;
		}
	}
}

// 24. Paginate
// ---------

.pagination {
	display: flex;
	justify-content: left;
	.page-numbers {
		min-width: 36px;
		display: flex;
		align-items: center;
		justify-content: center;
		border-radius: $pagination-radius;
		margin: 0 $pagination-item-spacing;
		&:not(.current):not(.dots):hover {
			color: #333;
			background-color: $very-light-gray;
		}
		&.dots {
			cursor: default;
			font-weight: $global-weight-bold;
			font-size: 1.25rem;
			color: $pagination-item-color;
			&::after {
				display: none;
			}
		}
		&.prev, &.next {
			i {
				font-size: 0.625em;
			}
		}
	}
}

// 25. Callout
// ---------

.callout {
	@include foundation-palette();
	border: none;
	&:last-child {
		margin-bottom: 0;
	}
}

// 26. Chips / Choices
// ---------

.chips {
	.input {
		border: $input-border;
		border-radius: $global-radius;
		padding: $input-padding / 2;
		min-height: 2rem;
		input {
			border-radius: 0;
			box-shadow: none;
			border: none;
			height: 1.25rem;
			padding: $input-padding / 2;
		}
	}
	.list-dropdown {
		border: none;
		margin-top: calc(#{nth($hr-border, 1)} * -1);
		border-radius: 0 0 $global-radius $global-radius;
		background-color: $card-background;
		.chips-item {
			font-size: $small-font-size;
			padding: $button-padding;
			&.is-highlighted {
				background-color: $very-light-gray;
			}
		}
	}
	.chips-list.multiple .chips-item {
		font-size: $small-font-size;
		margin: $input-padding / 2;
		border: none;
		background-color: get-color("success");
		padding: 0.375rem 0.75rem 0.25rem;
		.chips-button {
			border-left: 1px solid scale-color(get-color("success"), $lightness: -15%);
			margin: -2px -8px -2px 8px;
			width: 20px;
			height: 16px;
			opacity: 0.75;
			border-radius: 0;
		}
		&.is-highlighted {
			border: none;
			background-color: scale-color(get-color("success"), $lightness: -15%);
			.chips-button {
				border-left: 1px solid
					scale-color(get-color("success"), $lightness: -30%);
			}
		}
	}
	&.is-focused,
	&.is-open {
		.input,
		.list-dropdown {
			border: $input-border-focus;
		}
	}
	&.is-open {
		.input {
			border-radius: $global-radius $global-radius 0 0;
		}
	}
}

// 27. Breadcrumbs
// ---------


$breadcrumbs-margin: 0;

$breadcrumbs-item-font-size: .875rem;
$breadcrumbs-item-color: $dark-gray;
$breadcrumbs-item-color-current: $very-dark-gray;
$breadcrumbs-item-color-disabled: $medium-gray;
$breadcrumbs-item-margin: 0.5rem;
$breadcrumbs-item-uppercase: false;
$breadcrumbs-item-separator: true;
$breadcrumbs-item-separator-item: '·';
$breadcrumbs-item-separator-item-rtl: '·';
$breadcrumbs-item-separator-color: $breadcrumbs-item-color;

.breadcrumbs {
	padding: $button-padding;
	height: 36px;
	display: flex;
	align-items: center;
	li:not(:last-child)::after {
		content: '';
		margin: 0;
	}
	li:not(:first-child)::before {
    content: $breadcrumbs-item-separator-item;
    position: relative;
    margin: 0 $breadcrumbs-item-margin;
    opacity: 1;
    color: $breadcrumbs-item-separator-color;
	}
	&.no-padding {
		padding: 0;
	}
	li {
		//height: 1rem;
	}
}



// 28. Swiper
// ---------
.swiper-pagination.timespans {
	border-bottom: $hr-border;
}

.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {
	transform: scale(1) !important;
}

.swiper-pagination-bullet-custom {
	border-radius: 0 !important;
	background: none !important;
		&:hover {
			background: none;
			box-shadow: inset 0 -2px rgba($black, 0.17);
		}
		&:focus {
			background: none;
			outline: none;
		}
		&.swiper-pagination-bullet-active {
			color: inherit !important;
			background: none;
			box-shadow: inset 0 -2px $dark-gray;

			&-prev,
			&-prev-prev,
			&-next,
			&-next-next {
				transform: scale(1) !important;
			}
		}
}
